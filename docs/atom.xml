<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">

	<title>Planet DebugUself</title>
	<link rel="self" href="http://planet.du.zoomquiet.us/atom.xml"/>
	<link href="http://planet.du.zoomquiet.us/"/>
	<id>http://planet.du.zoomquiet.us/atom.xml</id>
	<updated>2017-08-29T00:42:27+00:00</updated>
	<generator uri="http://www.planetplanet.org/">Planet/2.0 +http://www.planetplanet.org</generator>

	<entry>
		<title type="html">Python环境出坑记</title>
		<link href="http://blog.junyu.io/posts/0707-python-env-config.html"/>
		<id>http://blog.junyu.io/posts/0707-python-env-config.html</id>
		<updated>2017-08-27T14:15:07+00:00</updated>
		<content type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;祸兮福所倚，福兮祸所伏&lt;/blockquote&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;理想很美好，现实很骨干…..&lt;/p&gt;
&lt;h2 id=&quot;坑坑坑&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#坑坑坑&quot; class=&quot;headerlink&quot; title=&quot;坑坑坑&quot;&gt;&lt;/a&gt;坑坑坑&lt;/h2&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Goal : Office PC -&amp;gt; Install Vmware &amp;amp; CentOS -&amp;gt; Pythoner&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;But : Settings -&amp;gt; how to root -&amp;gt; how to install git -&amp;gt; how to talk to unblock openssh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               -&amp;gt; how to use zsh -&amp;gt; how to use oh-my-zsh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               -&amp;gt; how to use atom -&amp;gt; libsecret error -&amp;gt; still in keng&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               -&amp;gt; how to install pyenv -&amp;gt; how to make it work&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               -&amp;gt; how to make shell work for me -&amp;gt; how to config -&amp;gt; where is shortcut?&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               -&amp;gt; how to blog -&amp;gt; how to use Chinese input&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               -&amp;gt; how to know linux very well -&amp;gt; linux books &amp;amp; shell programming learning&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Crazy But:     -&amp;gt; pyenv install do not work here -&amp;gt; pool internet -&amp;gt; need another way -&amp;gt; mirror&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               -&amp;gt; pip install do not work here too -&amp;gt; pool internet -&amp;gt; need another way -&amp;gt; mirror again&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;On My MAC -&amp;gt; why there are so many pythons? -&amp;gt; what is anaconda python -&amp;gt; which python am i using&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          -&amp;gt; how to clean them all -&amp;gt; how to make them all works for me as I want?&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Jupyter Notebook -&amp;gt; want to use an package -&amp;gt; pyenv installed&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 -&amp;gt; conda doesn&amp;amp;apost -&amp;gt; cannot use&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;上面每一个箭头都是一段入坑出坑，也许还有没出来的坑。踩坑多了，也就不觉得自己在坑里。今天梳理一下Python 环境相关的问题和坑，作一个经验总结。&lt;/p&gt;
&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;你有一台MAC 或者Linux 系统，已经安装了zsh 和 Oh-my-zsh ，下一步准备和python 一起愉快的玩耍。你肉身在墙内，由于种种网络环境的限制还不一定能够完全自由的站在墙外。使用的环境主要以python3 为主，但是语言这件事情，总是越自由一些越好不是么？也就是说最好可以对python 的环境进行有效的管理。&lt;br /&gt;在你还对python 懵懵懂懂的时候，有人推荐你安装了anaconda，据说这个神器可以一劳永逸的解决环境问题，让你专注在编程本身。你装了Anaconda，但依然没有摆脱折腾环境的命运，后来还折腾过Anaconda3 ，因为原来装的那个python 自带的是2。&lt;br /&gt;又过了一段时间，不断的听说pyenv 、pyenv virtualenv 惊闻anaconda 也是一个大大大坑，自己还浑然不知。随着学习的深入，真是举步维艰，每一次都倒在折腾环境上&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;系统里既有python2 又有python3，不知道如何切换，在pip 安装包时经常混淆。打开jupyter notebook 也是很容易就报错，一查发现还是环境的问题，还不容易搞明白了，安装一个包，结果发现总是连不上pypi，有一种想砸电脑的冲动……&lt;br /&gt;&lt;code&gt;pyenv virtualenv -&amp;gt; pyenv -&amp;gt; anaconda python -&amp;gt; zsh/bsh/csh -&amp;gt; internet&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;忍无可忍，无需再忍，把这个事情搞清楚吧～&lt;/p&gt;
&lt;h2 id=&quot;基本知识&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#基本知识&quot; class=&quot;headerlink&quot; title=&quot;基本知识&quot;&gt;&lt;/a&gt;基本知识&lt;/h2&gt;&lt;h3 id=&quot;一个系统里可以安装N个python&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#一个系统里可以安装N个python&quot; class=&quot;headerlink&quot; title=&quot;一个系统里可以安装N个python&quot;&gt;&lt;/a&gt;一个系统里可以安装N个python&lt;/h3&gt;&lt;p&gt;在一台Linux中可以安装多个版本的Python，但是系统默认的一般都只有一个，所以你需要一个可以管理多个版本python的软件来总体管理。如果你对Windows系统比较熟悉，可以类比一台Win下安装了一个虚拟机，在这个虚拟机里，你想怎么搞都行。这个python环境管理的工具就叫：pyenv。&lt;/p&gt;
&lt;h3 id=&quot;Linux-如何执行命令&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#Linux-如何执行命令&quot; class=&quot;headerlink&quot; title=&quot;Linux 如何执行命令&quot;&gt;&lt;/a&gt;Linux 如何执行命令&lt;/h3&gt;&lt;p&gt;我们在终端输入的任何一条命令，Shell 都会去到几个和“环境变量”（$PATH）相关的文件中寻找对应的路径下是否有可以执行的文件。这些可执行的文件里放着的是我们输入的命令和如何执行这些命令的代码说明。只有找到了这个文件，Shell才知道如何执行命令。这个过程可以简化的理解为：&lt;br /&gt;&lt;code&gt;输入命令 -&amp;gt; shell 读入命令 -&amp;gt; 查找文件 -&amp;gt; 定位文件中的环境变量 -&amp;gt; 浏览环境变量对应的路径下的文件 -&amp;gt; 在文件里寻找命令和执行方法 -&amp;gt; 找到了，按照要求执行 -&amp;gt; 找不到，输出找不到&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;如何执行python-的命令&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#如何执行python-的命令&quot; class=&quot;headerlink&quot; title=&quot;如何执行python 的命令&quot;&gt;&lt;/a&gt;如何执行python 的命令&lt;/h3&gt;&lt;p&gt;有了上面的知识，理解起来就很简单了，python 输入终端后，系统首先会去找到解释这个python 命令的文件，然后执行。由于系统里有多个python，那么调用哪一个python，其实就是看环境变量中哪一个python 环境对应的目录靠前，问题迎刃而解。&lt;/p&gt;
&lt;h3 id=&quot;什么是Shell&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#什么是Shell&quot; class=&quot;headerlink&quot; title=&quot;什么是Shell&quot;&gt;&lt;/a&gt;什么是Shell&lt;/h3&gt;&lt;p&gt;我们要和Linux 交流，要说Linux 能听懂的语言，并且要通过一个方式传递给Linux 系统。这个语言就是Shell 脚本语言，而这个工具，我们看到的是终端，其实终端里用于交互的也可以先成为Shell，可以理解为和Linux 交互的一种工具。Shell 把命令也就是Shell脚本传递给Linux，Linux知道我们的意图后执行返回输出，大概可以这么理解。&lt;/p&gt;
&lt;h3 id=&quot;多个不同的Shell-和环境变量&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#多个不同的Shell-和环境变量&quot; class=&quot;headerlink&quot; title=&quot;多个不同的Shell 和环境变量&quot;&gt;&lt;/a&gt;多个不同的Shell 和环境变量&lt;/h3&gt;&lt;p&gt;除了python的哪些坑，其实shell本身也有一些坑，shell有很多种，Bash，Z-bash等等。我习惯用的是Z-bash，也就是zsh。在启用了zsh之后，原来的一些环境变量需要进行调整，因为最终zshrc会调用一部分其他环境变量，还有一些是在zshrc自己做的配置。环境变量的相关文件语法是shell脚本语言的语法。建议有时间精力可以了及相关知识，会少入很多坑。&lt;/p&gt;
&lt;h2 id=&quot;代码实践&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#代码实践&quot; class=&quot;headerlink&quot; title=&quot;代码实践&quot;&gt;&lt;/a&gt;代码实践&lt;/h2&gt;&lt;p&gt;理论知识再多，不如来看看代码。&lt;/p&gt;
&lt;h3 id=&quot;shell常用的和环境变量相关的命令&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#shell常用的和环境变量相关的命令&quot; class=&quot;headerlink&quot; title=&quot;shell常用的和环境变量相关的命令&quot;&gt;&lt;/a&gt;shell常用的和环境变量相关的命令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ env&lt;/code&gt;和&lt;code&gt;$ printenv&lt;/code&gt;用于展示环境变量配置文件的内容。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ set&lt;/code&gt;展示所有的变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ export&lt;/code&gt;将变量导出到接下来的程序环境中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ echo&lt;/code&gt;输出，如果跟着变量名，会把变量的值输出&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;相关的环境变量配置文件&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#相关的环境变量配置文件&quot; class=&quot;headerlink&quot; title=&quot;相关的环境变量配置文件&quot;&gt;&lt;/a&gt;相关的环境变量配置文件&lt;/h3&gt;&lt;p&gt;涉及到的文件&lt;br /&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/etc/profile&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/etc/bashrc&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/etc/zshrc&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;如果是/etc/目录下则是所有用户共享的配置文件&lt;br /&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;~/.profile&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;~/.bash_profile&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;~/.bashrc&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;~/.zshrc&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;在自己的目录下则是仅有你这一个用户可用。&lt;/p&gt;
&lt;h3 id=&quot;环境变量示例&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#环境变量示例&quot; class=&quot;headerlink&quot; title=&quot;环境变量示例&quot;&gt;&lt;/a&gt;环境变量示例&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;export PATH=&amp;quot;/home/leon/.pyenv/bin:/usr/local/bin&amp;quot;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;export&lt;/code&gt;表示将变量导出到接下来的程序环境中。冒号是连接符号，这里程序会顺序的逐个去找对应的执行文件。bin文件夹下一般存放的是可执行的二进制文件，当我们输入命令的时候，程序就会逐个文件去找，如果找到了就会执行，找不到，会反馈找不到&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;eval &amp;quot;$(pyenv init -)&amp;quot;&lt;/code&gt;这句命令稍微复杂，是理解pyenv和环境变量关系的关键，分为两部分，一部分是shell的命令，一部分是理解pyenv init命令。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;eval：脚本语言中表示将后面的内容按照命令的方式直接执行&lt;/li&gt;
&lt;li&gt;$()的语法表示将命令执行的结果输出后再执行外面的命令，也就是说这一行会先执行 pyenv init - 之后，eval再执行 pyenv init - 的结果。&lt;/li&gt;
&lt;li&gt;关于pyenv init的命令，参考这两个文件，说的非常清楚：&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pyenv/pyenv/blob/master/COMMANDS.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Command Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pyenv/pyenv&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Simple Python Version Management: pyenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;整体解释：首先执行&lt;code&gt;pyenv init -&lt;/code&gt;的命令后的输出替换双引号中的内容，然后将双引号中给定的文本作为shell 命令执行。命令说明可以参考&lt;a href=&quot;http://www.unix.com/man-page/posix/1posix/eval/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;eval usage explan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;常用变量：&lt;code&gt;$HOME&lt;/code&gt; 和 &lt;code&gt;$PATH&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;最佳实践&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#最佳实践&quot; class=&quot;headerlink&quot; title=&quot;最佳实践&quot;&gt;&lt;/a&gt;最佳实践&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在自己的程序里跑:which python会发现调用的目录后，再执行 echo $PATH ,可以应证前面的目录或者其父目录一定在$PATH中。&lt;/li&gt;
&lt;li&gt;查看自己的~/.zshrc 文件&lt;/li&gt;
&lt;li&gt;了解anaconda python的路径，争取彻底处理,或者不会对自己现在的环境配置产生不良影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;解决办法&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#解决办法&quot; class=&quot;headerlink&quot; title=&quot;解决办法&quot;&gt;&lt;/a&gt;解决办法&lt;/h2&gt;&lt;p&gt;回到最初的问题，如何处理环境问题呢，整体思路是：如果你不了解如何采用命令行进行 anconda 或者conda 的配置方法时，建议全面放弃该整体环境。通过设置pyenv 插件的方式获得一个自己可控的多python 环境。这整个过程里都会涉及到对环境变量文件的修改，建议真正理解前面的知识点后再执行相关的操作。&lt;/p&gt;
&lt;h3 id=&quot;Bye-Anaconda&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#Bye-Anaconda&quot; class=&quot;headerlink&quot; title=&quot;Bye Anaconda&quot;&gt;&lt;/a&gt;Bye Anaconda&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.continuum.io/anaconda/user-guide/tasks/integration/python-path&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;找到可执行文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;按照[官方文档](&lt;a href=&quot;https://docs.continuum.io/anaconda/install/uninstall&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.continuum.io/anaconda/install/uninstall&lt;/a&gt; ）进行卸载。需要注意如果是zsh shell的使用者，最后删除环境变量要把bash 和zsh 都删除干净，以免后患。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;配置需要的环境&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#配置需要的环境&quot; class=&quot;headerlink&quot; title=&quot;配置需要的环境&quot;&gt;&lt;/a&gt;配置需要的环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;pyenv：参考官方文档&lt;a href=&quot;https://github.com/pyenv/pyenv&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pyenv&lt;/a&gt;，注意环境变量的配置和启动后的环境检查。&lt;/li&gt;
&lt;li&gt;ipython 安装：按照官方&lt;a href=&quot;https://ipython.org/install.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;安装，令人发指的简单。&lt;/li&gt;
&lt;li&gt;jupyter notebook 安装：按照官方&lt;a href=&quot;http://jupyter.org/install.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;的介绍，同样是令人发指的简单。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意，以上环境安装之前，先确认处于的python 环境是你需要的python 环境。&lt;/p&gt;
&lt;h2 id=&quot;回到Anaconda&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#回到Anaconda&quot; class=&quot;headerlink&quot; title=&quot;回到Anaconda&quot;&gt;&lt;/a&gt;回到Anaconda&lt;/h2&gt;&lt;p&gt;之前我也推荐给小伙伴安装anaconda套件，这样就可以不管各种环境问题了，这是一个初级的处理方案，当你开始对python 有更多了解有更多定制话的需求之后,当初盲目安装的anaconda反而成了“不可承受之重”，因为自己压根不知到anaconda默默的做了哪些系统配置的改动。&lt;br /&gt;其实错并不在anaconda 本身，如果你是数据科学工作者，并不希望被环境折腾，利用这样的套件是避免底层环境配置的好办法。但是对于python 的开发者来说，了解python 的生态系统，能够自己动手配置适合自己开发的环境还是很有必要的。更了解底层的机制有利于我们更好的了解计算机本身。这时候的ipython 和jupyter 也更容易被我们所用。&lt;/p&gt;
&lt;h2 id=&quot;未解之谜&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#未解之谜&quot; class=&quot;headerlink&quot; title=&quot;未解之谜&quot;&gt;&lt;/a&gt;未解之谜&lt;/h2&gt;&lt;p&gt;最后其实留了一个小问题：pip 的安装。一个很坑的事情是python的很多一手资源获取的速度非常非常的慢。解决办法有两个，翻出去，或者找一个国内的镜像。&lt;br /&gt;动手试试看吧～如果有必要，以后再来增补这一部分的内容。&lt;/p&gt;
&lt;h2 id=&quot;私货&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#私货&quot; class=&quot;headerlink&quot; title=&quot;私货&quot;&gt;&lt;/a&gt;私货&lt;/h2&gt;&lt;p&gt;优先和程序沟通，出了啥问题都先找谷哥是新手的第一阶段，其实程序一般都会提供足够的信息，当自己知道的不够多的时候再找谷哥。怎么和程序沟通，自然是找帮助文档，怎么找帮助文档，shell中主要有两个命令可以参考:&lt;br /&gt;&lt;code&gt;XXX -h&lt;/code&gt;&lt;br /&gt;&lt;code&gt;man XXX&lt;/code&gt;&lt;br /&gt;一般来说都会有自己想要的答案。&lt;/p&gt;
&lt;p&gt;其他的命令或者编程中需要查看的，自己应该优先探索，了解清楚一个如何方便调取这些内容的方法和体系，事半功倍。&lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pyenv/pyenv-virtualenv&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pyenv-virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pyenv/pyenv&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pyenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-read-and-set-environmental-and-shell-variables-on-a-linux-vps&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux enviromental variables intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/41573587/what-is-the-difference-between-venv-pyvenv-pyenv-virtualenv-virtualenvwrappe&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;diffence between pyenv and pyenv-virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://help.ubuntu.com/community/EnvironmentVariables&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ubuntu Official Environment Variables Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://book.douban.com/subject/3519360/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Shell 脚本学习指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/7411455/what-does-export-do-in-shell-programming&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What does “export” do in shell programming?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gnu.org/software/bash/manual/bash&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bash Reference Manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Command_substitution&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;$()的语法解释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/30034840/what-are-the-differences-between-conda-and-anaconda&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;what are the differences between conda and anaconda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/20994716/what-is-the-difference-between-pip-and-conda&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;what is the difference between pip and conda &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://conda.io/docs/user-guide/tasks/manage-environments.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Conda manage environments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://conda.io/docs/user-guide/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Conda getting-started&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;a href=&quot;http://blog.junyu.pro&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;完&lt;/a&gt;&lt;/blockquote&gt;


&lt;h2 id=&quot;ChangeLog&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#ChangeLog&quot; class=&quot;headerlink&quot; title=&quot;ChangeLog&quot;&gt;&lt;/a&gt;ChangeLog&lt;/h2&gt;&lt;p&gt;170827 新建&lt;/p&gt;</content>
		<author>
			<name>浚宇</name>
			<uri>http://blog.junyu.io/</uri>
		</author>
		<source>
			<title type="html">浚宇的博客</title>
			<subtitle type="html">人工智能、千字文</subtitle>
			<link rel="self" href="http://blog.junyu.io/atom.xml"/>
			<id>http://blog.junyu.io/</id>
			<updated>2017-08-27T16:42:25+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">五个月时间账单报告</title>
		<link href="http://liguanghe.github.io/2017/08/26/TimeReport5Month/"/>
		<id>http://liguanghe.github.io/2017/08/26/TimeReport5Month/</id>
		<updated>2017-08-26T11:35:32+00:00</updated>
		<content type="html">&lt;h2 id=&quot;进步计划&quot;&gt;&lt;a href=&quot;https://liguanghe.github.io/rss2.xml#进步计划&quot; class=&quot;headerlink&quot; title=&quot;进步计划&quot;&gt;&lt;/a&gt;进步计划&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;继续坚持之前的目标&lt;/li&gt;
&lt;li&gt;开始新项目, 列入 data, career&lt;/li&gt;
&lt;li&gt;如果，想看&lt;/li&gt;&lt;/ul&gt;</content>
		<author>
			<name>li guang he</name>
			<uri>http://liguanghe.github.io/</uri>
		</author>
		<source>
			<title type="html">Li Guanghe's blog</title>
			<link rel="self" href="https://liguanghe.github.io/rss2.xml"/>
			<id>https://liguanghe.github.io/rss2.xml</id>
			<updated>2017-08-26T16:42:11+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Special Day of Dunedin 但尼丁特色一天</title>
		<link href="http://liguanghe.github.io/2017/08/26/DunedinJaffaRace/"/>
		<id>http://liguanghe.github.io/2017/08/26/DunedinJaffaRace/</id>
		<updated>2017-08-26T06:35:32+00:00</updated>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https://www.lizhi.fm/2040956/2620595165221732870&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;click here to hear what I was speaking(点此链接听英语语&lt;/a&gt;&lt;/p&gt;</content>
		<author>
			<name>li guang he</name>
			<uri>http://liguanghe.github.io/</uri>
		</author>
		<source>
			<title type="html">Li Guanghe's blog</title>
			<link rel="self" href="https://liguanghe.github.io/rss2.xml"/>
			<id>https://liguanghe.github.io/rss2.xml</id>
			<updated>2017-08-26T16:42:11+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">给博客穿件外套</title>
		<link href="http://blog.junyu.io/posts/0016-cover-page-config.html"/>
		<id>http://blog.junyu.io/posts/0016-cover-page-config.html</id>
		<updated>2017-08-20T12:03:00+00:00</updated>
		<content type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;你的博客，你的使用手册&lt;/blockquote&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;这是我一直以来想做的一件事情，在博客的外面加上个人主页，我们散落在互联网上的痕迹越来越多，也越来越凌乱。甚至对作者本身搞清楚自己到底有多少网上的“作品”都是很复杂的一件事情。这时候增加一个个人主页显得尤为重要。&lt;/p&gt;
&lt;p&gt;有趣的事情是在Google学术信息时，现代重要的学术大拿几乎人人都有个人主页，不一定会写博客，但是一定会把自己的作品、联系方式、论文、研究方向等统统放出来，供大家使用。而&lt;a href=&quot;http://zoomquiet.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zoom.Quite&lt;/a&gt;的主页极富一个有趣的极客灵魂感。内容之多也是印象深刻。&lt;/p&gt;
&lt;p&gt;我之前做过几次尝试，但是效果都不是很理想，也没有找到特别好的办法，今天再次尝试，终于一鼓作气先完成了一个可用的及格版本，写一写，留个纪念。&lt;/p&gt;
&lt;h2 id=&quot;Github-Pages&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#Github-Pages&quot; class=&quot;headerlink&quot; title=&quot;Github Pages&quot;&gt;&lt;/a&gt;Github Pages&lt;/h2&gt;&lt;p&gt;Github Pages 是Github 的一个项目，通过在Github托管代码的方式把静态页面组装成可以展示的页面。&lt;a href=&quot;https://github.com/showcases/github-pages-examples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;有大量的示例。&lt;br /&gt;&lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;主页&lt;/a&gt;的视频一目了然，不再赘述。&lt;br /&gt;我的主页就是通过Github Pages生成的，使用的是默认的模版，如果不做过多的定制化，仅仅是在主页修改文字的话，内容非常非常的简单。参考我的&lt;a href=&quot;https://github.com/Wangjunyu/Leon.junyu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;仓库&lt;/a&gt;。对于这个主题，自己现在还是很满意的。&lt;/p&gt;
&lt;h2 id=&quot;域名设置&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#域名设置&quot; class=&quot;headerlink&quot; title=&quot;域名设置&quot;&gt;&lt;/a&gt;域名设置&lt;/h2&gt;&lt;p&gt;以往二级域名的设置已经驾轻就熟。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以blog.junyu.io的设置为例，在域名服务解析的服务页面修改模式为CNAME，把指向的地址修改为：wangjunyu.gitub.io. ，保存即可。如果还无法连接，回到Github查看设置，一般的做法是增加CNAME文件，修改默认分支为gh-pages。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一次设置的是一级域名以及开头为www 的跳转，按照之前的方式设置始终无法生效。之后从官方文档的&lt;a href=&quot;https://help.github.com/articles/using-a-custom-domain-with-github-pages/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using a custom domain with GitHub Pages
&lt;/a&gt;开始一页一页的找，终于在&lt;a href=&quot;https://help.github.com/articles/about-supported-custom-domains/#apex-domains&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;About supported custom domains
&lt;/a&gt;找到了端倪：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An apex domain is usually configured with an A, ALIAS, or ANAME record through your DNS provider.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于一级域名的设置，一般是在填写二级域名的地方写上&lt;code&gt;@&lt;/code&gt;，选择A 或者ALIAS 模式，跳转的地址需要使用ip，在上面提到的文档中有提到。修改之后，还可以用文档中提到的’dig’ 命令进行测试。貌似一级域名的调整需要一些时间，不过一般来说十几分钟也就够了。&lt;/p&gt;
&lt;p&gt;最后，展示一下我的&lt;a href=&quot;http://junyu.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;主页&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/setting-up-an-apex-domain/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Setting up an apex domain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/setting-up-an-apex-domain-and-www-subdomain/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Setting up an apex domain and www subdomain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/about-supported-custom-domains/#www-subdomains&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;About supported custom domains
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;a href=&quot;http://blog.junyu.pro&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;完&lt;/a&gt;&lt;/blockquote&gt;


&lt;h2 id=&quot;ChangeLog&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#ChangeLog&quot; class=&quot;headerlink&quot; title=&quot;ChangeLog&quot;&gt;&lt;/a&gt;ChangeLog&lt;/h2&gt;&lt;p&gt;170820 新建&lt;/p&gt;</content>
		<author>
			<name>浚宇</name>
			<uri>http://blog.junyu.io/</uri>
		</author>
		<source>
			<title type="html">浚宇的博客</title>
			<subtitle type="html">人工智能、千字文</subtitle>
			<link rel="self" href="http://blog.junyu.io/atom.xml"/>
			<id>http://blog.junyu.io/</id>
			<updated>2017-08-27T16:42:25+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Aoi-crontab</title>
		<link href="http://du.zoomquiet.io/2017-08/aoi-crontab/"/>
		<id>http://du.zoomquiet.io/2017-08/aoi-crontab</id>
		<updated>2017-08-18T00:00:00+00:00</updated>
		<content type="html">&lt;h1 id=&quot;crontab-是位好伙伴&quot;&gt;crontab 是位好伙伴&lt;/h1&gt;

&lt;p&gt;planet 很简单粗暴,只是:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如何免费的发布成网站?&lt;/li&gt;
  &lt;li&gt;又如何自动的刷新?&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;github-pages&quot;&gt;github-pages&lt;/h2&gt;
&lt;p&gt;~ &lt;a href=&quot;https://help.github.com/articles/user-organization-and-project-pages/&quot;&gt;User, Organization, and Project Pages - User Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;第一时间想到 &lt;code class=&quot;highlighter-rouge&quot;&gt;github-pages&lt;/code&gt; :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;只是记忆中要一个特殊的孤子分支什么的…&lt;/li&gt;
  &lt;li&gt;结果官方文档一看:
    &lt;ul&gt;
      &lt;li&gt;master, gh-pages, or a /docs folder on master&lt;/li&gt;
      &lt;li&gt;嗯哼?! 可以用约定的一个 master 目录就可以了?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://openmindclub.qiniucdn.com/res/debuguself/github_pages_docs.png&quot; alt=&quot;github_pages_docs.png（PNG 图像，494x548 像素）&quot; /&gt;&lt;/p&gt;

&lt;p&gt;果然…那就简单了&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;output_dir = docs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将相关配置文件中, 指定的输出目录变成 &lt;code class=&quot;highlighter-rouge&quot;&gt;docs&lt;/code&gt;,
每次 push 到 github 时,就完成了网站的更新.&lt;/p&gt;

&lt;h2 id=&quot;定期的嗯哼&quot;&gt;定期的嗯哼&lt;/h2&gt;
&lt;p&gt;~ 在所有 UNIX/Linux 环境中, 当前是 crontab&lt;/p&gt;

&lt;p&gt;参考:&lt;a href=&quot;https://help.ubuntu.com/community/CronHowto&quot;&gt;CronHowto - Community Help Wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;先在用户 crontab 中配置&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# m h  dom mon dow   command
*/10 *     * * *   /opt/cron/updates.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;每 10 秒调用一次 &lt;a href=&quot;https://github.com/zoom-quiet/scm/blob/master/sh/cron/updates.sh&quot;&gt;updates.sh&lt;/a&gt; 以便调试&lt;/p&gt;

&lt;p&gt;调试好后, 更新配置为&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# m h  dom mon dow   command
42 */8     * * *   /opt/cron/updates.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;每8小时的第42分钟,运行一次, 并将日志输出为:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opt/log/cron on default
$ ls -1
170818-planet.log
170819-planet.log
170820-planet.log
170821-planet.log
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这种形式…&lt;/p&gt;

&lt;h2 id=&quot;整体图谱&quot;&gt;整体图谱&lt;/h2&gt;
&lt;p&gt;~ 所以, 最终通过一台家用服务器, 无值守的完成了一大类静态网站的更新和发布&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            du.zoomquiet.io/planet/
                                  ^ 
                                  |
                          [[github-pages]]
{rss} {rss} ... {rss}             ^
  \     |         /               |
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        internet                  ^
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        home wifi                 ^ 
            |                     |
            V                     |
        Ubuntu 16.4               | 
       /[ miniPC ]                |
      /     |                     |
  crontab   |                     |
    |       V                     +
    +---&amp;gt;(Planet) --&amp;gt; HTML -&amp;gt; git push
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;todo&quot;&gt;TODO&lt;/h1&gt;
&lt;p&gt;~ 当然的故事远没有可以结束, 等待继续折腾的有:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;固化 wifi 连接的 ip&lt;/li&gt;
  &lt;li&gt;在 pyenv 中也能安装使用 baddb&lt;/li&gt;
  &lt;li&gt;将更新成果 email 给自己,以便知晓&lt;/li&gt;
  &lt;li&gt;将失败的更新 通过短信/微信/Slcak 等等渠道提醒自己&lt;/li&gt;
  &lt;li&gt;通过 Slack 或是其它渠道, 可以发布指令给主机进行各种必要的行为&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;用时&quot;&gt;用时&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;.5h 研究 github-pages 文档&lt;/li&gt;
  &lt;li&gt;1.h 实验明确 docs 效果&lt;/li&gt;
  &lt;li&gt;1.h 调试 crontab 脚本&lt;/li&gt;
  &lt;li&gt;.5h 测试全部自动化行为&lt;/li&gt;
  &lt;li&gt;1.h ASCII 图谱和文档化&lt;/li&gt;
&lt;/ul&gt;</content>
		<author>
			<name>Debug Uself grp.</name>
			<uri>http://du.zoomquiet.io/</uri>
		</author>
		<source>
			<title type="html">自怼圈</title>
			<link rel="self" href="http://du.zoomquiet.io/atom.xml"/>
			<id>http://du.zoomquiet.io</id>
			<updated>2017-08-21T16:42:13+00:00</updated>
		</source>
	</entry>

</feed>
