<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/">

<channel>
	<title>Planet DebugUself</title>
	<link>http://planet.du.zoomquiet.us/</link>
	<language>en</language>
	<description>Planet DebugUself - http://planet.du.zoomquiet.us/</description>

<item>
	<title>li guang he: Mac OSx Python 环境配置(操作指南)</title>
	<guid>http://liguanghe.github.io/2017/09/02/pyenv/</guid>
	<link>http://liguanghe.github.io/2017/09/02/pyenv/</link>
	<description>&lt;h2 id=&quot;why&quot;&gt;&lt;a href=&quot;https://liguanghe.github.io/rss2.xml#why&quot; class=&quot;headerlink&quot; title=&quot;why&quot;&gt;&lt;/a&gt;why&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;用 pyenv 管理 python 版本, 而不是用 anaconda. 理由: &lt;/li&gt;&lt;/ul&gt;</description>
	<pubDate>Sat, 02 Sep 2017 03:35:32 +0000</pubDate>
</item>
<item>
	<title>li guang he: Pyenv 学习线性记录</title>
	<guid>http://liguanghe.github.io/2017/09/02/NotePyenvPython/</guid>
	<link>http://liguanghe.github.io/2017/09/02/NotePyenvPython/</link>
	<description>&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;https://liguanghe.github.io/rss2.xml#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&amp;lt;- &lt;/p&gt;</description>
	<pubDate>Sat, 02 Sep 2017 03:00:32 +0000</pubDate>
</item>
<item>
	<title>junyu: Python环境出坑记</title>
	<guid>http://blog.junyu.io/posts/0707-python-env-config.html</guid>
	<link>http://blog.junyu.io/posts/0707-python-env-config.html</link>
	<description>&lt;blockquote class=&quot;blockquote-center&quot;&gt;祸兮福所倚，福兮祸所伏&lt;/blockquote&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;理想很美好，现实很骨干…..&lt;/p&gt;
&lt;h2 id=&quot;坑坑坑&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#坑坑坑&quot; class=&quot;headerlink&quot; title=&quot;坑坑坑&quot;&gt;&lt;/a&gt;坑坑坑&lt;/h2&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Goal : Office PC -&amp;gt; Install Vmware &amp;amp; CentOS -&amp;gt; Pythoner&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;But : Settings -&amp;gt; how to root -&amp;gt; how to install git -&amp;gt; how to talk to unblock openssh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               -&amp;gt; how to use zsh -&amp;gt; how to use oh-my-zsh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               -&amp;gt; how to use atom -&amp;gt; libsecret error -&amp;gt; still in keng&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               -&amp;gt; how to install pyenv -&amp;gt; how to make it work&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               -&amp;gt; how to make shell work for me -&amp;gt; how to config -&amp;gt; where is shortcut?&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               -&amp;gt; how to blog -&amp;gt; how to use Chinese input&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               -&amp;gt; how to know linux very well -&amp;gt; linux books &amp;amp; shell programming learning&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Crazy But:     -&amp;gt; pyenv install do not work here -&amp;gt; pool internet -&amp;gt; need another way -&amp;gt; mirror&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               -&amp;gt; pip install do not work here too -&amp;gt; pool internet -&amp;gt; need another way -&amp;gt; mirror again&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;On My MAC -&amp;gt; why there are so many pythons? -&amp;gt; what is anaconda python -&amp;gt; which python am i using&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          -&amp;gt; how to clean them all -&amp;gt; how to make them all works for me as I want?&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Jupyter Notebook -&amp;gt; want to use an package -&amp;gt; pyenv installed&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 -&amp;gt; conda doesn&amp;amp;apost -&amp;gt; cannot use&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;上面每一个箭头都是一段入坑出坑，也许还有没出来的坑。踩坑多了，也就不觉得自己在坑里。今天梳理一下Python 环境相关的问题和坑，作一个经验总结。&lt;/p&gt;
&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;你有一台MAC 或者Linux 系统，已经安装了zsh 和 Oh-my-zsh ，下一步准备和python 一起愉快的玩耍。你肉身在墙内，由于种种网络环境的限制还不一定能够完全自由的站在墙外。使用的环境主要以python3 为主，但是语言这件事情，总是越自由一些越好不是么？也就是说最好可以对python 的环境进行有效的管理。&lt;br /&gt;在你还对python 懵懵懂懂的时候，有人推荐你安装了anaconda，据说这个神器可以一劳永逸的解决环境问题，让你专注在编程本身。你装了Anaconda，但依然没有摆脱折腾环境的命运，后来还折腾过Anaconda3 ，因为原来装的那个python 自带的是2。&lt;br /&gt;又过了一段时间，不断的听说pyenv 、pyenv virtualenv 惊闻anaconda 也是一个大大大坑，自己还浑然不知。随着学习的深入，真是举步维艰，每一次都倒在折腾环境上&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;系统里既有python2 又有python3，不知道如何切换，在pip 安装包时经常混淆。打开jupyter notebook 也是很容易就报错，一查发现还是环境的问题，还不容易搞明白了，安装一个包，结果发现总是连不上pypi，有一种想砸电脑的冲动……&lt;br /&gt;&lt;code&gt;pyenv virtualenv -&amp;gt; pyenv -&amp;gt; anaconda python -&amp;gt; zsh/bsh/csh -&amp;gt; internet&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;忍无可忍，无需再忍，把这个事情搞清楚吧～&lt;/p&gt;
&lt;h2 id=&quot;基本知识&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#基本知识&quot; class=&quot;headerlink&quot; title=&quot;基本知识&quot;&gt;&lt;/a&gt;基本知识&lt;/h2&gt;&lt;h3 id=&quot;一个系统里可以安装N个python&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#一个系统里可以安装N个python&quot; class=&quot;headerlink&quot; title=&quot;一个系统里可以安装N个python&quot;&gt;&lt;/a&gt;一个系统里可以安装N个python&lt;/h3&gt;&lt;p&gt;在一台Linux中可以安装多个版本的Python，但是系统默认的一般都只有一个，所以你需要一个可以管理多个版本python的软件来总体管理。如果你对Windows系统比较熟悉，可以类比一台Win下安装了一个虚拟机，在这个虚拟机里，你想怎么搞都行。这个python环境管理的工具就叫：pyenv。&lt;/p&gt;
&lt;h3 id=&quot;Linux-如何执行命令&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#Linux-如何执行命令&quot; class=&quot;headerlink&quot; title=&quot;Linux 如何执行命令&quot;&gt;&lt;/a&gt;Linux 如何执行命令&lt;/h3&gt;&lt;p&gt;我们在终端输入的任何一条命令，Shell 都会去到几个和“环境变量”（$PATH）相关的文件中寻找对应的路径下是否有可以执行的文件。这些可执行的文件里放着的是我们输入的命令和如何执行这些命令的代码说明。只有找到了这个文件，Shell才知道如何执行命令。这个过程可以简化的理解为：&lt;br /&gt;&lt;code&gt;输入命令 -&amp;gt; shell 读入命令 -&amp;gt; 查找文件 -&amp;gt; 定位文件中的环境变量 -&amp;gt; 浏览环境变量对应的路径下的文件 -&amp;gt; 在文件里寻找命令和执行方法 -&amp;gt; 找到了，按照要求执行 -&amp;gt; 找不到，输出找不到&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;如何执行python-的命令&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#如何执行python-的命令&quot; class=&quot;headerlink&quot; title=&quot;如何执行python 的命令&quot;&gt;&lt;/a&gt;如何执行python 的命令&lt;/h3&gt;&lt;p&gt;有了上面的知识，理解起来就很简单了，python 输入终端后，系统首先会去找到解释这个python 命令的文件，然后执行。由于系统里有多个python，那么调用哪一个python，其实就是看环境变量中哪一个python 环境对应的目录靠前，问题迎刃而解。&lt;/p&gt;
&lt;h3 id=&quot;什么是Shell&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#什么是Shell&quot; class=&quot;headerlink&quot; title=&quot;什么是Shell&quot;&gt;&lt;/a&gt;什么是Shell&lt;/h3&gt;&lt;p&gt;我们要和Linux 交流，要说Linux 能听懂的语言，并且要通过一个方式传递给Linux 系统。这个语言就是Shell 脚本语言，而这个工具，我们看到的是终端，其实终端里用于交互的也可以先成为Shell，可以理解为和Linux 交互的一种工具。Shell 把命令也就是Shell脚本传递给Linux，Linux知道我们的意图后执行返回输出，大概可以这么理解。&lt;/p&gt;
&lt;h3 id=&quot;多个不同的Shell-和环境变量&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#多个不同的Shell-和环境变量&quot; class=&quot;headerlink&quot; title=&quot;多个不同的Shell 和环境变量&quot;&gt;&lt;/a&gt;多个不同的Shell 和环境变量&lt;/h3&gt;&lt;p&gt;除了python的哪些坑，其实shell本身也有一些坑，shell有很多种，Bash，Z-bash等等。我习惯用的是Z-bash，也就是zsh。在启用了zsh之后，原来的一些环境变量需要进行调整，因为最终zshrc会调用一部分其他环境变量，还有一些是在zshrc自己做的配置。环境变量的相关文件语法是shell脚本语言的语法。建议有时间精力可以了及相关知识，会少入很多坑。&lt;/p&gt;
&lt;h2 id=&quot;代码实践&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#代码实践&quot; class=&quot;headerlink&quot; title=&quot;代码实践&quot;&gt;&lt;/a&gt;代码实践&lt;/h2&gt;&lt;p&gt;理论知识再多，不如来看看代码。&lt;/p&gt;
&lt;h3 id=&quot;shell常用的和环境变量相关的命令&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#shell常用的和环境变量相关的命令&quot; class=&quot;headerlink&quot; title=&quot;shell常用的和环境变量相关的命令&quot;&gt;&lt;/a&gt;shell常用的和环境变量相关的命令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ env&lt;/code&gt;和&lt;code&gt;$ printenv&lt;/code&gt;用于展示环境变量配置文件的内容。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ set&lt;/code&gt;展示所有的变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ export&lt;/code&gt;将变量导出到接下来的程序环境中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ echo&lt;/code&gt;输出，如果跟着变量名，会把变量的值输出&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;相关的环境变量配置文件&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#相关的环境变量配置文件&quot; class=&quot;headerlink&quot; title=&quot;相关的环境变量配置文件&quot;&gt;&lt;/a&gt;相关的环境变量配置文件&lt;/h3&gt;&lt;p&gt;涉及到的文件&lt;br /&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/etc/profile&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/etc/bashrc&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/etc/zshrc&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;如果是/etc/目录下则是所有用户共享的配置文件&lt;br /&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;~/.profile&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;~/.bash_profile&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;~/.bashrc&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;~/.zshrc&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;在自己的目录下则是仅有你这一个用户可用。&lt;/p&gt;
&lt;h3 id=&quot;环境变量示例&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#环境变量示例&quot; class=&quot;headerlink&quot; title=&quot;环境变量示例&quot;&gt;&lt;/a&gt;环境变量示例&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;export PATH=&amp;quot;/home/leon/.pyenv/bin:/usr/local/bin&amp;quot;&lt;/code&gt;&lt;br /&gt;&lt;code&gt;export&lt;/code&gt;表示将变量导出到接下来的程序环境中。冒号是连接符号，这里程序会顺序的逐个去找对应的执行文件。bin文件夹下一般存放的是可执行的二进制文件，当我们输入命令的时候，程序就会逐个文件去找，如果找到了就会执行，找不到，会反馈找不到&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;eval &amp;quot;$(pyenv init -)&amp;quot;&lt;/code&gt;这句命令稍微复杂，是理解pyenv和环境变量关系的关键，分为两部分，一部分是shell的命令，一部分是理解pyenv init命令。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;eval：脚本语言中表示将后面的内容按照命令的方式直接执行&lt;/li&gt;
&lt;li&gt;$()的语法表示将命令执行的结果输出后再执行外面的命令，也就是说这一行会先执行 pyenv init - 之后，eval再执行 pyenv init - 的结果。&lt;/li&gt;
&lt;li&gt;关于pyenv init的命令，参考这两个文件，说的非常清楚：&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pyenv/pyenv/blob/master/COMMANDS.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Command Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pyenv/pyenv&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Simple Python Version Management: pyenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;整体解释：首先执行&lt;code&gt;pyenv init -&lt;/code&gt;的命令后的输出替换双引号中的内容，然后将双引号中给定的文本作为shell 命令执行。命令说明可以参考&lt;a href=&quot;http://www.unix.com/man-page/posix/1posix/eval/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;eval usage explan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;常用变量：&lt;code&gt;$HOME&lt;/code&gt; 和 &lt;code&gt;$PATH&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;最佳实践&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#最佳实践&quot; class=&quot;headerlink&quot; title=&quot;最佳实践&quot;&gt;&lt;/a&gt;最佳实践&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在自己的程序里跑:which python会发现调用的目录后，再执行 echo $PATH ,可以应证前面的目录或者其父目录一定在$PATH中。&lt;/li&gt;
&lt;li&gt;查看自己的~/.zshrc 文件&lt;/li&gt;
&lt;li&gt;了解anaconda python的路径，争取彻底处理,或者不会对自己现在的环境配置产生不良影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;解决办法&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#解决办法&quot; class=&quot;headerlink&quot; title=&quot;解决办法&quot;&gt;&lt;/a&gt;解决办法&lt;/h2&gt;&lt;p&gt;回到最初的问题，如何处理环境问题呢，整体思路是：如果你不了解如何采用命令行进行 anconda 或者conda 的配置方法时，建议全面放弃该整体环境。通过设置pyenv 插件的方式获得一个自己可控的多python 环境。这整个过程里都会涉及到对环境变量文件的修改，建议真正理解前面的知识点后再执行相关的操作。&lt;/p&gt;
&lt;h3 id=&quot;Bye-Anaconda&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#Bye-Anaconda&quot; class=&quot;headerlink&quot; title=&quot;Bye Anaconda&quot;&gt;&lt;/a&gt;Bye Anaconda&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.continuum.io/anaconda/user-guide/tasks/integration/python-path&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;找到可执行文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;按照[官方文档](&lt;a href=&quot;https://docs.continuum.io/anaconda/install/uninstall&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.continuum.io/anaconda/install/uninstall&lt;/a&gt; ）进行卸载。需要注意如果是zsh shell的使用者，最后删除环境变量要把bash 和zsh 都删除干净，以免后患。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;配置需要的环境&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#配置需要的环境&quot; class=&quot;headerlink&quot; title=&quot;配置需要的环境&quot;&gt;&lt;/a&gt;配置需要的环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;pyenv：参考官方文档&lt;a href=&quot;https://github.com/pyenv/pyenv&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pyenv&lt;/a&gt;，注意环境变量的配置和启动后的环境检查。&lt;/li&gt;
&lt;li&gt;ipython 安装：按照官方&lt;a href=&quot;https://ipython.org/install.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;安装，令人发指的简单。&lt;/li&gt;
&lt;li&gt;jupyter notebook 安装：按照官方&lt;a href=&quot;http://jupyter.org/install.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;的介绍，同样是令人发指的简单。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意，以上环境安装之前，先确认处于的python 环境是你需要的python 环境。&lt;/p&gt;
&lt;h2 id=&quot;回到Anaconda&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#回到Anaconda&quot; class=&quot;headerlink&quot; title=&quot;回到Anaconda&quot;&gt;&lt;/a&gt;回到Anaconda&lt;/h2&gt;&lt;p&gt;之前我也推荐给小伙伴安装anaconda套件，这样就可以不管各种环境问题了，这是一个初级的处理方案，当你开始对python 有更多了解有更多定制话的需求之后,当初盲目安装的anaconda反而成了“不可承受之重”，因为自己压根不知到anaconda默默的做了哪些系统配置的改动。&lt;br /&gt;其实错并不在anaconda 本身，如果你是数据科学工作者，并不希望被环境折腾，利用这样的套件是避免底层环境配置的好办法。但是对于python 的开发者来说，了解python 的生态系统，能够自己动手配置适合自己开发的环境还是很有必要的。更了解底层的机制有利于我们更好的了解计算机本身。这时候的ipython 和jupyter 也更容易被我们所用。&lt;/p&gt;
&lt;h2 id=&quot;未解之谜&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#未解之谜&quot; class=&quot;headerlink&quot; title=&quot;未解之谜&quot;&gt;&lt;/a&gt;未解之谜&lt;/h2&gt;&lt;p&gt;最后其实留了一个小问题：pip 的安装。一个很坑的事情是python的很多一手资源获取的速度非常非常的慢。解决办法有两个，翻出去，或者找一个国内的镜像。&lt;br /&gt;动手试试看吧～如果有必要，以后再来增补这一部分的内容。&lt;/p&gt;
&lt;h2 id=&quot;私货&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#私货&quot; class=&quot;headerlink&quot; title=&quot;私货&quot;&gt;&lt;/a&gt;私货&lt;/h2&gt;&lt;p&gt;优先和程序沟通，出了啥问题都先找谷哥是新手的第一阶段，其实程序一般都会提供足够的信息，当自己知道的不够多的时候再找谷哥。怎么和程序沟通，自然是找帮助文档，怎么找帮助文档，shell中主要有两个命令可以参考:&lt;br /&gt;&lt;code&gt;XXX -h&lt;/code&gt;&lt;br /&gt;&lt;code&gt;man XXX&lt;/code&gt;&lt;br /&gt;一般来说都会有自己想要的答案。&lt;/p&gt;
&lt;p&gt;其他的命令或者编程中需要查看的，自己应该优先探索，了解清楚一个如何方便调取这些内容的方法和体系，事半功倍。&lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pyenv/pyenv-virtualenv&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pyenv-virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pyenv/pyenv&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pyenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-read-and-set-environmental-and-shell-variables-on-a-linux-vps&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux enviromental variables intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/41573587/what-is-the-difference-between-venv-pyvenv-pyenv-virtualenv-virtualenvwrappe&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;diffence between pyenv and pyenv-virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://help.ubuntu.com/community/EnvironmentVariables&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ubuntu Official Environment Variables Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://book.douban.com/subject/3519360/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Shell 脚本学习指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/7411455/what-does-export-do-in-shell-programming&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What does “export” do in shell programming?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gnu.org/software/bash/manual/bash&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bash Reference Manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Command_substitution&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;$()的语法解释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/30034840/what-are-the-differences-between-conda-and-anaconda&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;what are the differences between conda and anaconda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/20994716/what-is-the-difference-between-pip-and-conda&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;what is the difference between pip and conda &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://conda.io/docs/user-guide/tasks/manage-environments.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Conda manage environments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://conda.io/docs/user-guide/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Conda getting-started&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;a href=&quot;http://blog.junyu.pro&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;完&lt;/a&gt;&lt;/blockquote&gt;


&lt;h2 id=&quot;ChangeLog&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#ChangeLog&quot; class=&quot;headerlink&quot; title=&quot;ChangeLog&quot;&gt;&lt;/a&gt;ChangeLog&lt;/h2&gt;&lt;p&gt;170827 新建&lt;/p&gt;</description>
	<pubDate>Sun, 27 Aug 2017 14:15:07 +0000</pubDate>
</item>
<item>
	<title>zoom.quiet: 用 DSL 们构筑商用系统</title>
	<guid>http://blog.zoomquiet.io/dsl-atop-openresty.html</guid>
	<link>http://blog.zoomquiet.io/dsl-atop-openresty.html</link>
	<description>&lt;h1 id=&quot;building-business-systems-with-dsls-for-nginx-openresty&quot;&gt;Building Business Systems with DSLs for &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; &lt;span class=&quot;amp&quot;&gt;&amp;amp;&lt;/span&gt; OpenResty&lt;a class=&quot;headerlink&quot; href=&quot;http://blog.zoomquiet.io/feeds/all.atom.xml#building-business-systems-with-dsls-for-nginx-openresty&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;~ 来自春哥的分享&lt;/p&gt;
&lt;h2 id=&quot;_1&quot;&gt;背景&lt;a class=&quot;headerlink&quot; href=&quot;http://blog.zoomquiet.io/feeds/all.atom.xml#_1&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;5年前也听录了一次 春哥的分享:&lt;a href=&quot;http://blog-zq-org.qiniucdn.com/pyblosxom/oss/openresty-intro-2012-03-06-01-13.html&quot;&gt;由Lua 粘合的Nginx生态环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;然后, 神奇的引发了各种后来的然后&lt;/li&gt;
&lt;li&gt;去年, 在 &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; 大会上, 春哥才真正讲出了10年前设计 OpenResty 前身时内心的宏大构想&lt;/li&gt;
&lt;li&gt;所以, 值得认真 review 一下:&lt;ul&gt;
&lt;li&gt;视频:&lt;a href=&quot;https://www.youtube.com/watch?v=w2RAZLptE-U&quot;&gt;Building Business Systems with Domain-Specific Languages for &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; &lt;span class=&quot;amp&quot;&gt;&amp;amp;&lt;/span&gt; OpenResty | Cloudflare - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;文稿:&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.nginx.com/blog/building-business-systems-with-domain-specific-languages-for-nginx-openresty-part-1/&quot;&gt;Domain-Specific Languages for &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; &lt;span class=&quot;amp&quot;&gt;&amp;amp;&lt;/span&gt; OpenResty, Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.nginx.com/blog/building-business-systems-with-domain-specific-languages-for-nginx-openresty-part-2/&quot;&gt;Domain-Specific Languages for &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; &lt;span class=&quot;amp&quot;&gt;&amp;amp;&lt;/span&gt; OpenResty, Part 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;tldr&quot;&gt;&lt;span class=&quot;caps&quot;&gt;TL&lt;/span&gt;;&lt;span class=&quot;caps&quot;&gt;DR&lt;/span&gt;&lt;a class=&quot;headerlink&quot; href=&quot;http://blog.zoomquiet.io/feeds/all.atom.xml#tldr&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&quot;p0&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide0_First-image.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;nginx.conf 2016 春哥进行的是压轴分享,对于在主厅面对千人的演讲, 他表示了虚伪的不好意思.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p2&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide2_OpenResty.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;OpenResty 项目发起自10年前,现在已经有完备的团队专门进行维护和开发,
twitter 官方帐号是: @OpenResty&lt;/p&gt;
&lt;p&gt;推荐关注&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p4&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide4_Lua-Libraries.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;OpenResty 在 &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; 内嵌了 LuaJIT 环境,
得以支持丰富的 Lua 库,结合 &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; 原生的非阻塞机制,
支持我们可以快速的完成复杂的 web 应用系统,
当前 &lt;code&gt;lus-resty-*&lt;/code&gt; 库已经支持非常多领域功能,比如说:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;各种数据库客户端: MySQL/Pg/MongoDB/RabbitMQ/..&lt;/li&gt;
&lt;li&gt;各种 upstreams 的健康检验&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;是的, OpenResty 是成长非常迅猛的社区&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p5&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide5_NGINX-LuaJIT.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;OpenResty 不仅仅将 LuaJIT 嵌入到 &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; ,
感谢 Lus 的 &lt;code&gt;co-routines&lt;/code&gt; 特性, 我们还创造了独有的特性,比如说:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;light threads&lt;/li&gt;
&lt;li&gt;timers&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;or&quot;&gt;&lt;span class=&quot;caps&quot;&gt;OR&lt;/span&gt; 的世界观&lt;a class=&quot;headerlink&quot; href=&quot;http://blog.zoomquiet.io/feeds/all.atom.xml#or&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt=&quot;p6&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide6_The-All-Inclusive-Philosophy.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;OpenResty 的世界观是 &lt;code&gt;全包容&lt;/code&gt; 的,
不排斥其它任何技术, 事实上 resty 用户来自从 &lt;span class=&quot;caps&quot;&gt;JAVA&lt;/span&gt; 到 Go 各种技术人群.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; 可以在后端到客户端之间作很多有趣的事儿,
所以, 在 OpenResty 帮助下, 可以很好的完成混合解决, 能和旧系统无缝衔接.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p7&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide7_Simple-Small-Fast-Flexible.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;OpenResty 的目标是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简洁&lt;/li&gt;
&lt;li&gt;轻便&lt;/li&gt;
&lt;li&gt;快速&lt;/li&gt;
&lt;li&gt;灵活&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;认真研究 Lua 后, 我们发现这真是个神奇的恩物, 不仅小而且快,更加灵活,支撑复杂的大型系统也没有问题.&lt;/p&gt;
&lt;p&gt;总之这是个设计务实,发展良好,基础稳定的好语言,
OpenResty 将 Lua 和 &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; 深度结合, 倍增了双方的实力.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p8&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide8_Synchronously-Nonblocking.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;OpenResty 的 I/O 模式是 &lt;code&gt;无阻塞异步&lt;/code&gt;,
虽然 异步 在现实世界中无处不在,
但是,人类的头脑只习惯同步, 当然,俺也反感回调&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p9&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide9_Light-Threads-Semaphores.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;所以,我们设计了 纤程和信号 来模拟并发, 而实际上只有一个唯一的系统线程.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p10&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide10_Cosockets.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;并发明了: ‘Cosockets’ ~ 肯接字 (哈N 年前就想翻译了, 现在才有好想法儿)&lt;/p&gt;
&lt;p&gt;类似 &lt;span class=&quot;caps&quot;&gt;BSD&lt;/span&gt;/Lua 套接字的容器,
支持我们象写 &lt;span class=&quot;caps&quot;&gt;PHP&lt;/span&gt; 代码一样写同步表述, 但实际运行是完全异步的.&lt;/p&gt;
&lt;p&gt;(&lt;code&gt;是也乎:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;golang 其实也借鉴了我们这一设计 )&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p11&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide11_Timers-and-Sleeping.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;我们也重新定义了 计时器和睡眠原语,
将异步和下游任务在 &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; 中完备的分离了,
使用起来就象 cron .&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p12&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide12_Shm-Based-Dictionaries-and-Queues.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;同时还发明了 &lt;code&gt;shm&lt;/code&gt; ~ 内存分享式字典和队列,
以便支持我们的应用在 &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; 不同进程间分享数据,
同时又不打破 &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; 的异步性能.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p13&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide13_Dynamic-SSL-Handshakes.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;而且刚刚我们也开始支持 动态&lt;span class=&quot;caps&quot;&gt;SSL&lt;/span&gt;握手, 以便支持下游的 &lt;span class=&quot;caps&quot;&gt;HTTPS&lt;/span&gt; 事务.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p14&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide14_Dynamic-SSL-Handshakes-Example.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;比如在 Cloudflare, 作为&lt;span class=&quot;caps&quot;&gt;CDN&lt;/span&gt; 供应商, 有很多客户以及虚拟服务器和边缘服务器构成网络,&lt;/p&gt;
&lt;p&gt;要面对的一个主要问题就是: &lt;span class=&quot;caps&quot;&gt;SSL&lt;/span&gt; 证书/密钥太多&lt;/p&gt;
&lt;p&gt;理论上应该根据实际请求来动态加载对应的证书/密钥,
这样我们就可以同时持有无限量的 &lt;span class=&quot;caps&quot;&gt;SSL&lt;/span&gt; 证书/密钥,
感谢本地流量调度, 虽然不可能有单机可以查询所有用户的流量.&lt;/p&gt;
&lt;p&gt;进一步的, 在 OpenResty 可以通过 共享内存和工作级缓存中管理 &lt;span class=&quot;caps&quot;&gt;SSL&lt;/span&gt; 证书/密钥,&lt;/p&gt;
&lt;p&gt;数据 — 比如: 证书/密钥 — 当前已支持在 &lt;a href=&quot;https://github.com/alticelabs/kyoto&quot;&gt;Kyoto Tycoon&lt;/a&gt; 中分发,
其它后端,比如说 Redis 或其它分布式存储也当然可以了.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p15&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide15_Dynamic-Load-Balancers.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;通过 &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; 中的 Lua 进行动态加载平衡也是能的.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p16&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide16_Dynamic-Load-Balancers-Ex.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;比如这一则配置:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;几行就可以定义一系列复杂的决策&lt;/li&gt;
&lt;li&gt;动态, 意味着你可以在该级别上对每个请求灵活应用不同的均衡策略&lt;/li&gt;
&lt;li&gt;并指定重试策略:&lt;ul&gt;
&lt;li&gt;比如, 特定请求没有获得响应时&lt;/li&gt;
&lt;li&gt;可以选择忽略&lt;/li&gt;
&lt;li&gt;也可以选择请求和请求的位置&lt;/li&gt;
&lt;li&gt;等等,都在 &lt;code&gt;balancer_by_lua_block&lt;/code&gt; 中可以声明&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同时不影响 &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; 各种标准模块,比如说:&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_proxy_module.html&quot;&gt;Proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html&quot;&gt;FastCGI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_uwsgi_module.html&quot;&gt;uwsgi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;… 等等的使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以及 &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; 核心模块,比如: keepalive,连接池等等, 也一样开箱即用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;p17&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide17_ngx_stream_lua_module-TCP-UDP.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;最近我们创建了 &lt;a href=&quot;https://github.com/openresty/stream-lua-nginx-module&quot;&gt;ngx_stream_lua_module&lt;/a&gt; 模块来替代以往的
&lt;a href=&quot;https://github.com/openresty/lua-nginx-module&quot;&gt;ngx_ HTTP_lua_ module&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过 &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; 核心子系统,来支持实现通用的 &lt;span class=&quot;caps&quot;&gt;TCP&lt;/span&gt;/&lt;span class=&quot;caps&quot;&gt;UDP&lt;/span&gt; 服务,&lt;/p&gt;
&lt;p&gt;实际上 &lt;a href=&quot;http://openresty.org/en/&quot;&gt;OpenResty® - Official Site&lt;/a&gt; 
本身的 &lt;span class=&quot;caps&quot;&gt;DNS&lt;/span&gt; 服务器就由此模块支撑,
还有人拿个模块实现了类似 syslog 的 &lt;span class=&quot;caps&quot;&gt;TCP&lt;/span&gt; 守护进程, 来接收远程的大量日志.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p18&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide18_Advanced-Debugging-Profiling-Tools-Based-on-GDB-SystemTap.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;多年以来, 我们积累了大量的专用测试工具.&lt;/p&gt;
&lt;p&gt;在 Cloudflare, 运营有全球范围的复杂大型网络,
很多问题发生的几率仅仅有 1% 或 0.1% 甚至于 0.001%,
几乎难以复现, 必须依赖高级调试工具来完成.&lt;/p&gt;
&lt;p&gt;已经开源了很多基于 &lt;span class=&quot;caps&quot;&gt;GDB&lt;/span&gt; 以及 SystemTap 的工具:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;caps&quot;&gt;GDB&lt;/span&gt; 主要调试死锁进程,借助 &lt;span class=&quot;caps&quot;&gt;GDB&lt;/span&gt; 以及 dump 工具, Mike Pall 已经修复了10多个隐藏在 &lt;span class=&quot;caps&quot;&gt;JIT&lt;/span&gt; 中非常深的积年老问题&lt;/li&gt;
&lt;li&gt;SystemTap 则是非常赞的 RedHat 工程师贡献的动态追踪平台,&lt;ul&gt;
&lt;li&gt;允许分享分析运行时系统, &lt;/li&gt;
&lt;li&gt;从 内核到 &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; 整个儿软件桟以及用户的 Lua 业务脚本, &lt;/li&gt;
&lt;li&gt;都能在对生产系统微小影响下快速分析出来,&lt;/li&gt;
&lt;li&gt;甚至于不用关闭防火墙&lt;/li&gt;
&lt;li&gt;可以直接进行线上活体分析&lt;/li&gt;
&lt;li&gt;&amp;lt;— 这才是未来系统开发的应该姿势&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(&lt;code&gt;是也乎:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;嗯哼? &lt;span class=&quot;caps&quot;&gt;LISP&lt;/span&gt; 构造的系统, 从一开始就这样的哪?! )&lt;/p&gt;
&lt;h3 id=&quot;or_1&quot;&gt;&lt;span class=&quot;caps&quot;&gt;OR&lt;/span&gt; 的应用场景&lt;a class=&quot;headerlink&quot; href=&quot;http://blog.zoomquiet.io/feeds/all.atom.xml#or_1&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt=&quot;p19&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide19_C2000K.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;随着近几个月, 我们发布的重要功能,
OpenResty 已在真实客户单主机上支持住了 200万 级别的并发请求,&lt;/p&gt;
&lt;p&gt;已经有客户在生产环境中部署了这种级别的推送系统.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p20&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide20_Web-API-and-Microservices.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;另外一个常见领域是接口和微服务,&lt;/p&gt;
&lt;p&gt;很多人使用 OpenResty 构建这类服务,比如:
&lt;a href=&quot;https://github.com/Mashape/kong&quot;&gt;Mashape’s Kong&lt;/a&gt;平台,
以及 &lt;a href=&quot;https://github.com/adobe-apiplatform/apigateway&quot;&gt;Adobe’s &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; Gateway&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;此外, 一些美国银行使用 OpenResty 来管理路由器流量,&lt;/p&gt;
&lt;p&gt;同时, 一些更大的中国互联网公司, 在用 OpenResty 构建实时股票信息服务, 这些接口是其中流量最大的,&lt;/p&gt;
&lt;p&gt;还有用来发布实时天气信息接口的…&lt;/p&gt;
&lt;p&gt;等等吧, OpenResty 的应用可能是无限的.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p21&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide21_Web-Gateways.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;另外一个 OpenResty 的应用场景是 web 网关,
很多 &lt;span class=&quot;caps&quot;&gt;CDN&lt;/span&gt; 厂商都在这样使用.&lt;/p&gt;
&lt;p&gt;我们还知道有人用 OpenResty 来管理通用 &lt;span class=&quot;caps&quot;&gt;TCP&lt;/span&gt;/&lt;span class=&quot;caps&quot;&gt;UDP&lt;/span&gt; 流量,&lt;/p&gt;
&lt;p&gt;Lua 可以支持你的网关在运行中得以变化,
基于互联网的动态性, 
&lt;span class=&quot;caps&quot;&gt;CDN&lt;/span&gt; 厂商必须灵活的应对客户的不同需求, 而客户的需求越来越复杂化.&lt;/p&gt;
&lt;p&gt;甚至于人们在期待可以包含业务逻辑,比如常见的想动态修订配置文件,来支持软件更新, 等等出于实际需求的要求.&lt;/p&gt;
&lt;p&gt;选择 Lua 令一切变的可能,
因为 &lt;span class=&quot;caps&quot;&gt;JIT&lt;/span&gt; (即时编译)的机制,
可以随时根据变更的配置生成新的规则, 并根据不同的请求进行对应的流量优化…&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; 原先就支持基于 &lt;span class=&quot;caps&quot;&gt;HUP&lt;/span&gt;信号 的配置重加载, 
但是, 这对于厂商而言成本太高, 因为无法精确的退出相应请求来重启.&lt;/p&gt;
&lt;p&gt;另外, 缓存也是个大问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有时一个客户的缓存非常冷&lt;/li&gt;
&lt;li&gt;但是,又不能为了释放这部分数据而重启整个儿缓存&lt;/li&gt;
&lt;li&gt;这对其它用户来说太惨了…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;p22&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide22_Web-Applications.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;OpenResty 原先设计目标是支持完备的web 应用,
第一个案例是网站, 所以,有了 &lt;a href=&quot;http://openrety.org&quot;&gt;openrety.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如今有越来越多的传统网站,在用 OpenResty 从头开始构建&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p23&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide23_Web-Applications-Products-Details-Page.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;例如 京东网, 中国最大的 &lt;span class=&quot;caps&quot;&gt;B2C&lt;/span&gt; 电子商务服务平台之一.
在各种营销日, 他们必须面对海量的请求,
类似美国的黑色星期五, 在中国则是 11.11&lt;/p&gt;
&lt;p&gt;(&lt;code&gt;是也乎:&lt;/code&gt;
问题在中国的光棍节营销流量, 是黑色日期五的几个数量级哪!!!
毕竟, 美国的打折多数是线下的… )&lt;/p&gt;
&lt;p&gt;最早他们使用 Starnet 技术, 经常崩溃,
后来迁移到 &lt;span class=&quot;caps&quot;&gt;JAVA&lt;/span&gt; 技术桟, 全然崩溃.&lt;/p&gt;
&lt;p&gt;最终迁移到 OpenResty ,虽然后端依然是 &lt;span class=&quot;caps&quot;&gt;JAVA&lt;/span&gt;,
但是迎接所有流量的全部是 OpenResty 了, 从此再也没有崩溃过.&lt;/p&gt;
&lt;p&gt;现在他们使用 OpenResty 来生成复杂的网页.&lt;/p&gt;
&lt;p&gt;比如这个截屏,是 iPhone 的详细产品信息页,
类似页面吸引了主要的流量, 基于 OpenResty 的模板库来生成动态页面, 这是个非常长的页面,只截取了顶部,&lt;/p&gt;
&lt;p&gt;他们内部维护了一个非常庞大的模板库,
并用 Redis 来缓存数据 ,以免流量直接击中后端的 &lt;span class=&quot;caps&quot;&gt;JAVA&lt;/span&gt; 服务,&lt;/p&gt;
&lt;p&gt;春哥曾经询问 &lt;span class=&quot;caps&quot;&gt;JD&lt;/span&gt;, 是否需要优化, 他们回答,速度已经足够快, 不用了,谢谢…&lt;/p&gt;
&lt;p&gt;(&lt;code&gt;是也乎:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这可能是由于性能太好而丢失定制服务的最好案例,
MySQL 只能表示 23333 了… )&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p24&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide24_OpenResty-Website.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;我们自己则重构了官方网站,
整个网站使用 Lua 在 OpenResty 上重写而成,&lt;/p&gt;
&lt;p&gt;使用 PorstgreSQL 作为后端数据存储,
通过 OpenResty 直接和数据库交互,&lt;/p&gt;
&lt;p&gt;通过 &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; 的异步非阻塞进程来处理 &lt;span class=&quot;caps&quot;&gt;IO&lt;/span&gt;, 非常快速并便宜,&lt;/p&gt;
&lt;p&gt;基于 Pg 内置的全文搜索而支持了网站的内部搜索功能.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p25&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide25_Distributed-Storage-Systems.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这是令春哥自己都惊讶的领域:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作为中国最大的网站之一 sina.com&lt;/li&gt;
&lt;li&gt;发布有类似 Jawbox 的网络存储产品&lt;/li&gt;
&lt;li&gt;他们不仅用 OpenResty 来构建前端&lt;/li&gt;
&lt;li&gt;而且还用在后台直接处理文件 I/O&lt;/li&gt;
&lt;li&gt;对于这种操作他们非常自得&lt;/li&gt;
&lt;li&gt;也非常自豪的成为 OpenReaty 核心组件贡献方之一&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;p26&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide26_Datanet.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Datanet 则是另外一个类似的项目,
虽然没开源, 但是,作者在努力中,&lt;/p&gt;
&lt;p&gt;创始人是 Russell Sullivan,
在 twitter 是 @jaksprats&lt;/p&gt;
&lt;p&gt;正在基于 OpenResty 构建一个分布式数据网络, 推荐大家去直接嗯哼…&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p27&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide27_Conflict-Free-Replicated-Data-Types.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CRDT&lt;/code&gt; ~ 无冲突数据复制类型,
简单的说, 这是全新的复杂理论,
涉及复杂的算法和论文, 还在折腾中…&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p28&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide28_Forming-a-Stateful-Network.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;基本上象个 &lt;code&gt;半p2p&lt;/code&gt; 网络,
每个节点都可以有状态,通过 类似 p2p 的机制完成自动同步,&lt;/p&gt;
&lt;p&gt;为什么叫 &lt;code&gt;半p2p&lt;/code&gt; 网络,因为这其中必须有某种中心,
可以是大型数据中心, 
以便支持暂时下线的节点, 重新上线时,快速发现差异完成同步….&lt;/p&gt;
&lt;p&gt;是的, 机制很复杂要说明白得额外2小时…&lt;/p&gt;
&lt;p&gt;(&lt;code&gt;是也乎:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;不就是不完备的区块链网络嘛… )&lt;/p&gt;
&lt;h3 id=&quot;sregex&quot;&gt;大事儿: sregex&lt;a class=&quot;headerlink&quot; href=&quot;http://blog.zoomquiet.io/feeds/all.atom.xml#sregex&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt=&quot;p29&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide29_Sregex.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;sregex &amp;lt;— 春哥一直在造的轮那 ~ 正则表达式引擎,&lt;/p&gt;
&lt;p&gt;当然是为了真实的业务需求&lt;/p&gt;
&lt;p&gt;(&lt;code&gt;是也乎:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但是,这是阻止不了从头造轮子的快感的…嗯哼! )&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p30&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide30_web-server.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;本质上她必须可以支撑处理流式数据,
毕竟 web 服务器要处理的数据理论上是无限大的.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p31&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide31_4KB-buffer.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;关键问题是高速处理缓冲区块:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缓冲总是混沌的&lt;/li&gt;
&lt;li&gt;通常很小,比如 4k&lt;/li&gt;
&lt;li&gt;数据一进入, 就必须完成处理,得到我们需要的,并作出决定:&lt;ul&gt;
&lt;li&gt;丢弃&lt;/li&gt;
&lt;li&gt;或是通过&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;而且是单向流水线&lt;ul&gt;
&lt;li&gt;一但数据块被处理&lt;/li&gt;
&lt;li&gt;立即将被下一组填充&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这一构想很得趣, 但是,不简单&lt;/li&gt;
&lt;li&gt;算法非常困难, 传统的都不行…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;p32&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide32_4KB-buffer-2.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;回溯算法在主流正则表达式引擎中很流行,&lt;/p&gt;
&lt;p&gt;基本上, 当你找不到匹配时,就将指针逈后移动再重试.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;caps&quot;&gt;PCRE&lt;/span&gt; 以及其它很多引擎都是基于这一算法的, 但是,包含了很多问题,不仅仅是固定缓冲区的要求.&lt;/p&gt;
&lt;p&gt;还可能引发非常昂贵的系统资源浪费, 
这种现象我们定义为: &lt;code&gt;病理行为&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p33&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide33_Xregex%E2%80%99s-BFA-Engine-Performance-Benchmark.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;春哥构建了 &lt;a href=&quot;https://en.wikipedia.org/wiki/Deterministic_finite_automaton&quot;&gt;&lt;span class=&quot;caps&quot;&gt;DFA&lt;/span&gt;&lt;/a&gt;
(确定性有限自动机),
当前性能尚可, 如图中所示:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;橙色-&amp;gt;Google &lt;span class=&quot;caps&quot;&gt;RE2&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;紫色-&amp;gt;&lt;span class=&quot;caps&quot;&gt;PCRE&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;JIT&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;黑色-&amp;gt;&lt;span class=&quot;caps&quot;&gt;PCRE&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;绿色-&amp;gt;&lt;span class=&quot;caps&quot;&gt;PCRE2&lt;/span&gt;解释器&lt;/li&gt;
&lt;li&gt;蓝色-&amp;gt;&lt;span class=&quot;caps&quot;&gt;PCRE2&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;JIT&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;黄色-&amp;gt;sregex &lt;span class=&quot;caps&quot;&gt;DFA&lt;/span&gt; 原型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&quot;caps&quot;&gt;PCRE&lt;/span&gt; 是 C 实现的 Perl 兼容正则表达库,性能口碑很好&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p34&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide34_benchmark2.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;在这个有点儿复杂的测试案例中:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;caps&quot;&gt;RE2&lt;/span&gt; 比 &lt;span class=&quot;caps&quot;&gt;PCRE&lt;/span&gt; 好&lt;/li&gt;
&lt;li&gt;甚至于比解释器版本还好&lt;/li&gt;
&lt;li&gt;但是,  sregex &lt;span class=&quot;caps&quot;&gt;DFA&lt;/span&gt; 原型 依然更好点儿&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;p35&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide35_benchmark3.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;而在 &lt;code&gt;/d.*?d/&lt;/code&gt; 这一简单案例测试中:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们的原型获得了极大的优势&lt;/li&gt;
&lt;li&gt;因为 &lt;span class=&quot;caps&quot;&gt;DFA&lt;/span&gt; 可以进行智能优化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;p36&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide36_benchmark4.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;span class=&quot;caps&quot;&gt;PCRE&lt;/span&gt; 提供的性能测试案例集中, 我们(黄色)领先一些&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p37&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide37_benchmark5.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这一正则表达式案例是从 ModSecurity 的核心规则中抽取的,
应用在 &lt;span class=&quot;caps&quot;&gt;WAF&lt;/span&gt;(web 应用防火墙)过滤核心中.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回溯引擎浪费了大量 &lt;span class=&quot;caps&quot;&gt;CPU&lt;/span&gt; 资源,因为在反复回溯&lt;/li&gt;
&lt;li&gt;sregex &lt;span class=&quot;caps&quot;&gt;DFA&lt;/span&gt; 原型则相反, 非常快&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;sregex 将是 OpenResty 接下来的重心!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前还不是产品状态, 只是个快速原型&lt;/li&gt;
&lt;li&gt;春哥用大约2000行 perl 代码实现了一个正则表达式引擎&lt;/li&gt;
&lt;li&gt;以便生成能被 clang/&lt;span class=&quot;caps&quot;&gt;GCC&lt;/span&gt; 编译的 C 代码&lt;/li&gt;
&lt;li&gt;完成这些,只是为了印证设想&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们认为:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;err&quot;&gt;自己的&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JIT&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;引擎比&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Clang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GCC&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;更好&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;因为优化器更通用&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;自己的&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JIT&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;引擎比&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Clang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GCC&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;更好&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;因为优化器更通用&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;自己的&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JIT&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;引擎比&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Clang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GCC&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;更好&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;因为优化器更通用&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(&lt;code&gt;好吧, 重要的事儿得说三次&lt;/code&gt;)&lt;/p&gt;
&lt;h3 id=&quot;dsl-lzsql&quot;&gt;&lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt;实验: &lt;span class=&quot;caps&quot;&gt;LZSQL&lt;/span&gt;&lt;a class=&quot;headerlink&quot; href=&quot;http://blog.zoomquiet.io/feeds/all.atom.xml#dsl-lzsql&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt=&quot;p38&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide38_A-Web-Platform-As-A-Virtual-Machine.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;回到主题: 建立在 OpenResty 上的 &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;先分享了一系列 OpenResty 的新功能,&lt;/p&gt;
&lt;p&gt;但是,更重要的是, 春哥认为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OpenResty 可以视作 &lt;span class=&quot;caps&quot;&gt;VM&lt;/span&gt;(虚拟机)&lt;/li&gt;
&lt;li&gt;就象 &lt;span class=&quot;caps&quot;&gt;JVM&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;可以更加强大, 更加面向 web&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;p39&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide39_lz.taobao.com_.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这个实验其实是7~8年前完成的,不算新鲜,但是,实验是值得回味的.&lt;/p&gt;
&lt;p&gt;那时春哥供职 taobao, 是 alibaba 集团子公司, 是中国最大的 &lt;span class=&quot;caps&quot;&gt;B2C&lt;/span&gt; 平台,
当时在数据分析部门,
客户是 taobao 的商家, 类似 eBay 的商家就是卖家一样.&lt;/p&gt;
&lt;p&gt;客户需要一个流量分析工具, 
来统计店面的流量,和广告部署/销售间的影响力关系, 这是个非常大的产品.&lt;/p&gt;
&lt;p&gt;(&lt;code&gt;是也乎:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;为什么大? 因为要分析的数据量,相当于好几个 twitter 的数据量…. )&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p40&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide40_Taobao-homepage.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这是产品首页&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p41&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide41_chart.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;给出了类似 google 分析样漂亮的图表, 所不同的是有更多数据报告.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p42&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide42_data-volume.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;由于 yaobao 的体量,数据量很大, 非常的大&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p43&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide43_experiment-on-the-client-side.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;当时春哥 放胆在客户端进行各种尝试,8年前:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整个儿应用逻辑已经全部在前端了&lt;/li&gt;
&lt;li&gt;类似 gmail ,完全由一组运行在网页中的脚本构建&lt;/li&gt;
&lt;li&gt;还引入了客户端模板:&lt;ul&gt;
&lt;li&gt;构建了一个能从模板生成 &lt;span class=&quot;caps&quot;&gt;JS&lt;/span&gt; 代码的引擎&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;另外也提供了 web 服务来驱动客户端应用&lt;/li&gt;
&lt;li&gt;总之, web 服务是关键,是唯一运行在服务器上的东西&lt;ul&gt;
&lt;li&gt;将 &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; 发送给客户端&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;caps&quot;&gt;JS&lt;/span&gt; 用编译后的模板生成页面区域&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;p44&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide44_server-side-.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;量子统计整体架构如上:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OpenResty 位于后端和浏览器之间&lt;/li&gt;
&lt;li&gt;后端是 MySQL 集群,因为数据量大, 光卷就有超过1亿个&lt;/li&gt;
&lt;li&gt;另外还有实时统计集群作支撑&lt;/li&gt;
&lt;li&gt;同时还作为一个开放平台发布 &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; 的 &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;以及 Memcached 和 Tokyo Tyrant 集群来管理其它元数据&lt;/li&gt;
&lt;li&gt;但是, 相比其它系统要简洁的多,只用 &lt;span class=&quot;caps&quot;&gt;PHP&lt;/span&gt; 来运行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;p45&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide45_-Inventing-LZSQL.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;春哥很快意识到关键问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有足够的人力来支撑开发&lt;/li&gt;
&lt;li&gt;整个儿团队只有两个实习生&lt;/li&gt;
&lt;li&gt;但是, 不得不将原先 &lt;span class=&quot;caps&quot;&gt;PHP&lt;/span&gt; 编写的整个儿数据分析产品迁移到 OpenResty 平台&lt;/li&gt;
&lt;li&gt;即使迫使实习生拼命写 Lua 代码,但是,面对复杂到狂乱的业务逻辑,这是个不可能的任务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;春哥用了一个晚上思考, 决定:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于对数据分析核心模型/模式的理解&lt;/li&gt;
&lt;li&gt;构建自己的 &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;以便用更加自然的形式来描述业务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;毕竟: &lt;code&gt;什么是编程?&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本质上是和机器对话&lt;/li&gt;
&lt;li&gt;令机器理解我们的意图&lt;/li&gt;
&lt;li&gt;从而快速/便宜/可靠的完成业务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以, 编程的关键是:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;err&quot;&gt;提高同机器对话的效率&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么, 如果你能用两个词或是一个句子来表达一个想法,
为毛要使用十多行代码? 那也忒自虐了!&lt;/p&gt;
&lt;p&gt;所以, 春哥不喜欢 &lt;span class=&quot;caps&quot;&gt;JAVA&lt;/span&gt;, 因为要输入的代码太多了,
Lua 也不是个好形式, 以及其它现有的所有命令式通用开发语言&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p46&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide46_to-convey-the-idea-to-the-machine.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;所以有了第一个 &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt;: &lt;code&gt;LZSQL&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于&lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt; 的形式, 快速传达想法给系统&lt;/li&gt;
&lt;li&gt;为什么选择 &lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt; ? &lt;ul&gt;
&lt;li&gt;因为数据分析产品本质上是基于关系型数据模型的&lt;/li&gt;
&lt;li&gt;无论是否使用 &lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt; 数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我们可以在 &lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt; 中定义变量和用户变量, 作为第一公民&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt; 可以在一些 MySQL 后端运行&lt;/li&gt;
&lt;li&gt;也可以在 &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; 中运行&lt;ul&gt;
&lt;li&gt;因为实现了包含 &lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt; 引擎的内存数据库&lt;/li&gt;
&lt;li&gt;只有100行左右的 Lua 代码&lt;/li&gt;
&lt;li&gt;运行良好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;复杂性来源是因为数据不得不来自很多不同的 MySQL 数据库&lt;/li&gt;
&lt;li&gt;然后在内存中重新关联, 并组合成最终结果发送到客户端&lt;/li&gt;
&lt;li&gt;这其中涉及很多棘手的问题:&lt;ul&gt;
&lt;li&gt;必须能分解 &lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt; 到不同节点上运行&lt;/li&gt;
&lt;li&gt;同时还能自动优化 &lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt; 查询 &lt;ul&gt;
&lt;li&gt;~ MySQL 自己的优化器通常无法完成海量优化&lt;/li&gt;
&lt;li&gt;特别是在 &lt;span class=&quot;caps&quot;&gt;OLAP&lt;/span&gt; 场景中&lt;/li&gt;
&lt;li&gt;(在线分析过程)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;p47&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide47_writing-the-business-logic-in-LZSQL-files.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;最终, 实际上我们用 &lt;span class=&quot;caps&quot;&gt;LZSQL&lt;/span&gt; 来记述业务逻辑,
用编译器生成 Lua 代码,
在线发布 Lua 代码并运行, 而线上不再需要编译器.&lt;/p&gt;
&lt;p&gt;这就是 &lt;code&gt;编译&lt;/code&gt; 的美妙所在.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p48&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide48_to-compile-the-LZSQL-files.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;当前的, 提供 &lt;span class=&quot;caps&quot;&gt;CLI&lt;/span&gt; 工具,
完成 &lt;span class=&quot;caps&quot;&gt;LZSQL&lt;/span&gt; 脚本的编译, 链接到最终 Lua 应用程序.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p49&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide49_The-result.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;其结果非常赞:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为编译器可以进行很多优化&lt;/li&gt;
&lt;li&gt;人通常不能, 甚至于不能正确运行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;旧业务是 &lt;span class=&quot;caps&quot;&gt;PHP&lt;/span&gt; 编写的,新接口由春哥编译器生成 Lua 代码,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求延迟下降超过 90%,&lt;/li&gt;
&lt;li&gt;甚至于这包含了 MySQL 的延迟,&lt;/li&gt;
&lt;li&gt;上图是一次完整的 接口 &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; 延迟对比&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;值得注意的是, 这时使用的还是标准的 Lua 解释器&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p50&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide50_still-using-the-interpreter-only.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;进一步的, 仅仅切换为 LuaJIT , 速度就获得进一步加强&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p51&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide51_4000-lines-of-Perl.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;而实际上, &lt;span class=&quot;caps&quot;&gt;LZSQL&lt;/span&gt; 编译器,仅仅是 4000行 Perl 代码, 但是,包含了非常复杂的优化和类型检查以及一应上下文相关的分析过程.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p52&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide52_several-code-emitters.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;而且, 编译器包含了:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个解析自己的解析器&lt;/li&gt;
&lt;li&gt;一个 &lt;span class=&quot;caps&quot;&gt;AST&lt;/span&gt;(抽象语法树)&lt;/li&gt;
&lt;li&gt;一堆优化器&lt;/li&gt;
&lt;li&gt;一个代码映射器&lt;ul&gt;
&lt;li&gt;其实是多种映射器&lt;/li&gt;
&lt;li&gt;因为 &lt;span class=&quot;caps&quot;&gt;LZSQL&lt;/span&gt; 支持多种语言后端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;p53&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide53_why-not-C-code.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;是的, 当时可以生成 Lua 代码,
当然, 也可以生成 C 代码.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p54&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide54_generate-an-NGINX-model.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;是的, 当时后端是一个实时数据库, 提供了非常具体和复杂的线程协议,以至难以人工完成客户端.&lt;/p&gt;
&lt;p&gt;但是, 数据库发布有一个完备的wiki 文档:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;那么为毛不让电脑可以理解文档&lt;/li&gt;
&lt;li&gt;自动生成一个 &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; C 模块来调用呢?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;于是, 春哥实现了这个想法&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p55&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide55_Ticpy.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p56&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide56_implementation-example.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;是的, 嘦很小的 &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; 抽象就可以解析 wiki 文档.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p57&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide57_a-very-quick-Perl-script.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;于是, 再再再次用 Perl 快速完成了一个编译器来从文档生成 &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; C 模块,
可以自由的通过 &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; 来和数据库交互,&lt;/p&gt;
&lt;p&gt;这算 &lt;span class=&quot;caps&quot;&gt;NGINC&lt;/span&gt; 的上游模块.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p58&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide58_just-300-lines-of-code.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;是的, 文档只有300行, 但是生成的 C 模块有12000行代码.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p59&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide59_Writing-Programs-to-Write-Programs-to-Write-Programs.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这一案例说明:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编程就是和机器沟通&lt;/li&gt;
&lt;li&gt;如果文档足够完备&lt;/li&gt;
&lt;li&gt;那么完全可以直接转换给机器&lt;/li&gt;
&lt;li&gt;从而避免了人工编程的各种糟心事儿&lt;/li&gt;
&lt;li&gt;这一切指向了一个觉悟:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;err&quot;&gt;宁愿写程序上编程来生成代码&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(&lt;code&gt;是也乎:&lt;/code&gt; 也嫑直接写业务代码)&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p60&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide60_Test-Scaffold.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;同时我们的测试脚手架也是基于 &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; 的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Test::Nginx::Socket&lt;/code&gt; 被所有 OpenResty 工程引用&lt;/li&gt;
&lt;li&gt;以规范的形式来描述测试用例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即使你不会 Perl 也没有关系:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;嘦按照规范提供描述&lt;/li&gt;
&lt;li&gt;服务就能理解并进行对应测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;dsl&quot;&gt;&lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; 的爆发&lt;a class=&quot;headerlink&quot; href=&quot;http://blog.zoomquiet.io/feeds/all.atom.xml#dsl&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt=&quot;p61&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide61_How-About-Tests.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;幻灯参考: http://search.cpan.org/perldoc?Cheater&lt;/p&gt;
&lt;p&gt;接下来的一件大事:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于新产品&lt;/li&gt;
&lt;li&gt;数据库中还没有真实的业务数据时&lt;/li&gt;
&lt;li&gt;如何进行测试?&lt;/li&gt;
&lt;li&gt;我们需要数据来测试 &lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt; 查询/网页/服务/…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以, 春哥再再再再次用 Perl 实现了一个类似 &lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt; 语言的建数据表用的 &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p62&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide62_Cheater.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;就是 Cheater 工具:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用正则表达式来指定允许渲染的字段&lt;/li&gt;
&lt;li&gt;并能指定依赖的外链&lt;/li&gt;
&lt;li&gt;那么这工具就能生成满足所有约束和要求的随机数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;p63&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide63_The-OpenResty-Model-Language.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;回到 OpenResty 场景中, 从多年前的实验中可以学到:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以通过设计/实现模式语言来简化开发&lt;/li&gt;
&lt;li&gt;可以在 OpenResty 中使用 &lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt; &lt;/li&gt;
&lt;li&gt;编译器知道在哪儿运行:&lt;ul&gt;
&lt;li&gt;本地或是远程&lt;/li&gt;
&lt;li&gt;又或是混合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在不同数据库中运行 &lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt; ,甚至于不一定是关系型数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;p64&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide64_The-OpenResty-View-Language.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;另外, 也发布有 OpenResty View 语言:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 &lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;&lt;span class=&quot;caps&quot;&gt;MVC&lt;/span&gt;&lt;/a&gt; 模型&lt;/li&gt;
&lt;li&gt;在 View 层:&lt;ul&gt;
&lt;li&gt;Perl 有 &lt;span class=&quot;caps&quot;&gt;TT2&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Python 有 Jinja2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;现在有了自己的 &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; 就可以生成客户端 &lt;span class=&quot;caps&quot;&gt;JS&lt;/span&gt; 或是服务端 Lua 代码&lt;/li&gt;
&lt;li&gt;这是 &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; 的优势&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;p65&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide65_Jemplate-Lemplate.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jemplate 将 Perl 的 &lt;span class=&quot;caps&quot;&gt;TT2&lt;/span&gt; 模板转换为 &lt;span class=&quot;caps&quot;&gt;JS&lt;/span&gt; 代码&lt;/li&gt;
&lt;li&gt;Lemplate 则编译成 OpenResty Lua 代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;p66&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide66_The-OpenResty-Controller-Language.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这又是一件大事儿&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p67&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide67_it%E2%80%99s-a-Lua-based-language.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;看起来是这样的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于规则的语言&lt;ul&gt;
&lt;li&gt;你只需要描述一系列规则&lt;/li&gt;
&lt;li&gt;箭头左侧是谓词, 类似条件&lt;/li&gt;
&lt;li&gt;箭头右侧是行为, 比如重定向/返回错误码…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;那些谓词其实是无效的 (不会导致执行具体的行动)&lt;/li&gt;
&lt;li&gt;编译器进一步优化的话, 就能将机关的谓词合并起来&lt;/li&gt;
&lt;li&gt;多数 &lt;span class=&quot;caps&quot;&gt;CDN&lt;/span&gt; 业务编辑都可以如此表述&amp;lt;—这就是 &lt;span class=&quot;caps&quot;&gt;CDN&lt;/span&gt; 市场的本质&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不同的商业模式包含共同的内在特性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这是可能的也是可以的&lt;/li&gt;
&lt;li&gt;比如数据分析业务共同的模式是关系模式&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt; 语言洽好是这种模式的表述形式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于 &lt;span class=&quot;caps&quot;&gt;CDN&lt;/span&gt; 或是 &lt;span class=&quot;caps&quot;&gt;WAF&lt;/span&gt; 型的业务:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应该就是规则集的模型&lt;/li&gt;
&lt;li&gt;理论上是个 &lt;code&gt;前向链专家系统模型&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;春哥是 &lt;span class=&quot;caps&quot;&gt;AI&lt;/span&gt; 的资深粉丝&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高中时就研究过各种流派的 &lt;span class=&quot;caps&quot;&gt;AI&lt;/span&gt; 实现&lt;/li&gt;
&lt;li&gt;当前机器学习是热点&lt;/li&gt;
&lt;li&gt;而专家系统是 &lt;span class=&quot;caps&quot;&gt;AI&lt;/span&gt; 的分支, 并没有过时&lt;/li&gt;
&lt;li&gt;比如说:&lt;ul&gt;
&lt;li&gt;基于 Prolog 的语法解析, 在自然语言研究领域很流行&lt;/li&gt;
&lt;li&gt;而语义解析, 则多用 &lt;span class=&quot;caps&quot;&gt;CLISP&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;70年代 &lt;span class=&quot;caps&quot;&gt;NASA&lt;/span&gt; 就折腾过类似的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;p68&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide68_remove-all-the-C-comments.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;OpenResty 也支持组合多个 正则表达式 来执行复杂的过滤:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这样,所有替换在 &lt;span class=&quot;caps&quot;&gt;NGNIX&lt;/span&gt; 输出过滤器中&lt;ul&gt;
&lt;li&gt;是缓冲实时完成的&lt;/li&gt;
&lt;li&gt;所以, 定长缓冲区, 无限数据流处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非常 &lt;span class=&quot;caps&quot;&gt;COOL&lt;/span&gt; , 不是嘛?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上图是批量从 C++ 中删除注释的案例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你可以稍微修订就能支持 &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;/&lt;span class=&quot;caps&quot;&gt;JS&lt;/span&gt; 的注释删除&lt;/li&gt;
&lt;li&gt;当然的,这是基于 sregex 的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;p69&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide69_-WAF-Hot.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;caps&quot;&gt;WAF&lt;/span&gt; 是热点, 公司已在为 &lt;span class=&quot;caps&quot;&gt;NGINX&lt;/span&gt; 推出 ModSecurity 端口,&lt;/p&gt;
&lt;p&gt;春哥看来 &lt;span class=&quot;caps&quot;&gt;WAF&lt;/span&gt; 本身就可以基于前述控制语言来完成.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p70&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide70_ModSecurity-a-Horrible-DSL.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;ModSecurity 本身作为 &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; 很可怕&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p71&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide72_-Example-of-a-Poor-Rule.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这是 ModSecurity 一个线路的描述&lt;/p&gt;
&lt;p&gt;已经复杂到天际了, 而厂商们还发明了各种更加复杂 &lt;span class=&quot;caps&quot;&gt;WAF&lt;/span&gt; 语法,
只是为了表述类似 &lt;code&gt;if-else&lt;/code&gt; 的逻辑&lt;/p&gt;
&lt;p&gt;那么为什么不创建我们这样简洁的 &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; ?&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p72&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide71_it%E2%80%99s-a-Lua-based-language-2.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这样的语法就干净很多:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;也支持短路:如果第一条匹配了,就跳过后续的&lt;/li&gt;
&lt;li&gt;本质上只是个 &lt;code&gt;if-else&lt;/code&gt; 不必要进行深度嵌套&lt;/li&gt;
&lt;li&gt;如果查阅其它 &lt;span class=&quot;caps&quot;&gt;CDN&lt;/span&gt; 厂商的 &lt;span class=&quot;caps&quot;&gt;VSL&lt;/span&gt; 代码&lt;ul&gt;
&lt;li&gt;其实就是一堆堆的 &lt;code&gt;if-else&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;是的, 很疯狂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;or_2&quot;&gt;&lt;span class=&quot;caps&quot;&gt;OR&lt;/span&gt; 的目标&lt;a class=&quot;headerlink&quot; href=&quot;http://blog.zoomquiet.io/feeds/all.atom.xml#or_2&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt=&quot;p73&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide73_Model-View-Controller.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模式 ~ 不同种类的商业系统都有内在相似的模型,从而抽象为一个 &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;视图 ~ 已经完成很多种模板语言,都是 &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;控制 ~ 也已经展示了, 通过规则的描述可以简洁的完成 &lt;span class=&quot;caps&quot;&gt;WAF&lt;/span&gt; 业务的定义&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;p74&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide74_SportLang.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;运动类游戏当然也可以拥有自己的语言, 来描述业务系统.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;err&quot;&gt;还能更&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COOL&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;嘛&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们作为软件行业的专业人士,
讲真, 强迫其它行业用户(如物理/数学/建筑/哲学…)来使用计算机语言, 这本身算是种耻辱吧.&lt;/p&gt;
&lt;p&gt;理想情景中, 我们应该支持用户:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用他们熟悉的领域语言&lt;/li&gt;
&lt;li&gt;自然的描述&lt;/li&gt;
&lt;li&gt;而机器可以理解并运算&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而且, 同时:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; 还包含了大量的自动优化过程&lt;/li&gt;
&lt;li&gt;毕竟这不是每个程序猿都知道的技巧&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;p75&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide75_The-Y-Language.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;当前我们内部已经在使用 Y 语言:&lt;/p&gt;
&lt;p&gt;这是全新的能调试多种语言的工具, 类似 &lt;span class=&quot;caps&quot;&gt;GDB&lt;/span&gt;, SystemTap, LuaJIT&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p76&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide76_CoffeeScript.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;另外也支持 CoffeeScript :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;毕竟 CoffeeScript 很受欢迎&lt;/li&gt;
&lt;li&gt;这种 &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; 可以生成 &lt;span class=&quot;caps&quot;&gt;JS&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;现在我们可以从 CoffeeScript 生成 OpenResty Lua 代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;p77&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide77_A-Meta-DSL.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;我们也有元&lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用来生成其它所有 &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; 的 &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;包含 元&lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; 本身&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们还有创建编译器的 &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt;, 能生成:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; 编译器&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; 优化器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Perl 一直是 春哥 的第一序列武器,
但是,并一定是最好的,
最终可能为构建编译创建专用 &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p78&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide78_Clean-Separation.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;我们可以在业务描述和业务实现间进行清晰的隔离.&lt;/p&gt;
&lt;p&gt;这意味着我们可以一夜之间, 完成业务系统实现技术桟的切换,而不用触动具体的业务代码.&lt;/p&gt;
&lt;p&gt;比如说:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们可以将当前运行在 OpenResty 上的业务系统&lt;/li&gt;
&lt;li&gt;一键迁移到 C 甚至于汇编代码上&lt;/li&gt;
&lt;li&gt;而不会变动业务逻辑&lt;/li&gt;
&lt;li&gt;甚至于将来迁移到新技术桟上, 也不用改变业务代码&lt;ul&gt;
&lt;li&gt;只需要编写一个新的后端优化器&lt;/li&gt;
&lt;li&gt;并添加到现有的 &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; 编译器中就好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;p79&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide79_Compiling-Style-Web-Frameworks.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;此外, 我们也将获得全新的 web 应用框架:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译型的&lt;/li&gt;
&lt;li&gt;不再依赖一层层的嵌套, 从而令开发运行都越来越慢&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们必须同时实现美丽和效率:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是未来商业产品级工程的必须特性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt=&quot;p80&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide80_The-Best-Language.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;最好的语言就是 &lt;code&gt;商业语言&lt;/code&gt; 正如春哥意识到的&lt;/p&gt;
&lt;p&gt;基于商业语言开发,还有一个好处就是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一但完成了一个 &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; &lt;/li&gt;
&lt;li&gt;将一些业务逻辑放入后&lt;/li&gt;
&lt;li&gt;如果有幸拿到客户原始需求文档&lt;/li&gt;
&lt;li&gt;两厢对比,发现接近&lt;/li&gt;
&lt;li&gt;就意味着作对了 ;-)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实, 还有最好的方式来描述具体的领域问题:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;p81&quot; src=&quot;https://cdn-1.wp.nginx.com/wp-content/uploads/2017/08/Yichun_Zhang-conf2016-slide81_The-Machine-Truly-Understands-Business-Logic.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;是的, 只有机器真正理解你的业务逻辑, 那么:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以获得比以往更多的嗯哼&lt;/li&gt;
&lt;li&gt;比如自动生成测试用例&lt;/li&gt;
&lt;li&gt;完成上下文分析&lt;/li&gt;
&lt;li&gt;或者干脆为你即时生成真正可运行的实例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(&lt;code&gt;是也乎:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这, 才是 OpenResty 真正的目标:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;逼所有程序猿变成产品经理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;)&lt;/p&gt;
&lt;h2 id=&quot;tlog&quot;&gt;TLog&lt;a class=&quot;headerlink&quot; href=&quot;http://blog.zoomquiet.io/feeds/all.atom.xml#tlog&quot; title=&quot;Permanent link&quot;&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;.5h 决定嗯哼&lt;/li&gt;
&lt;li&gt;2.h 完成上篇&lt;/li&gt;
&lt;li&gt;2.5h 完成下篇&lt;/li&gt;
&lt;/ul&gt;</description>
	<pubDate>Sat, 26 Aug 2017 16:00:00 +0000</pubDate>
</item>
<item>
	<title>li guang he: 五个月时间账单报告</title>
	<guid>http://liguanghe.github.io/2017/08/26/TimeReport5Month/</guid>
	<link>http://liguanghe.github.io/2017/08/26/TimeReport5Month/</link>
	<description>&lt;h2 id=&quot;进步计划&quot;&gt;&lt;a href=&quot;https://liguanghe.github.io/rss2.xml#进步计划&quot; class=&quot;headerlink&quot; title=&quot;进步计划&quot;&gt;&lt;/a&gt;进步计划&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;继续坚持之前的目标&lt;/li&gt;
&lt;li&gt;开始新项目, 列入 data, career&lt;/li&gt;
&lt;li&gt;如果，想看&lt;/li&gt;&lt;/ul&gt;</description>
	<pubDate>Sat, 26 Aug 2017 11:35:32 +0000</pubDate>
</item>
<item>
	<title>li guang he: Special Day of Dunedin 但尼丁特色一天</title>
	<guid>http://liguanghe.github.io/2017/08/26/DunedinJaffaRace/</guid>
	<link>http://liguanghe.github.io/2017/08/26/DunedinJaffaRace/</link>
	<description>&lt;p&gt;&lt;a href=&quot;https://www.lizhi.fm/2040956/2620595165221732870&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;click here to hear what I was speaking(点此链接听英语语&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Sat, 26 Aug 2017 06:35:32 +0000</pubDate>
</item>
<item>
	<title>bambooooooom: 🎂</title>
	<guid>http://bambooom.github.io/2017/08/25/bday/</guid>
	<link>http://bambooom.github.io/2017/08/25/bday/</link>
	<description>&lt;p&gt;&lt;img src=&quot;http://7xpew2.com1.z0.glb.clouddn.com/170825bday.jpg&quot; alt=&quot;b-day&quot; /&gt;&lt;/p&gt;

&lt;p&gt;🖖&lt;/p&gt;</description>
	<pubDate>Fri, 25 Aug 2017 23:42:31 +0000</pubDate>
</item>

</channel>
</rss>
