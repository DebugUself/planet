<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/">

<channel>
	<title>Planet DebugUself</title>
	<link>http://planet.du.zoomquiet.us/</link>
	<language>en</language>
	<description>Planet DebugUself - http://planet.du.zoomquiet.us/</description>

<item>
	<title>li guang he: Special Day of Dunedin 但尼丁特色一天</title>
	<guid>http://liguanghe.github.io/2017/08/26/DunedinJaffaRace/</guid>
	<link>http://liguanghe.github.io/2017/08/26/DunedinJaffaRace/</link>
	<description>&lt;p&gt;&lt;a href=&quot;https://www.lizhi.fm/2040956/2620595165221732870&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;click here to hear what I was speaking(点此链接听英语语&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Sat, 26 Aug 2017 06:35:32 +0000</pubDate>
</item>
<item>
	<title>junyu: 给博客穿件外套</title>
	<guid>http://blog.junyu.io/posts/0016-cover-page-config.html</guid>
	<link>http://blog.junyu.io/posts/0016-cover-page-config.html</link>
	<description>&lt;blockquote class=&quot;blockquote-center&quot;&gt;你的博客，你的使用手册&lt;/blockquote&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;这是我一直以来想做的一件事情，在博客的外面加上个人主页，我们散落在互联网上的痕迹越来越多，也越来越凌乱。甚至对作者本身搞清楚自己到底有多少网上的“作品”都是很复杂的一件事情。这时候增加一个个人主页显得尤为重要。&lt;/p&gt;
&lt;p&gt;有趣的事情是在Google学术信息时，现代重要的学术大拿几乎人人都有个人主页，不一定会写博客，但是一定会把自己的作品、联系方式、论文、研究方向等统统放出来，供大家使用。而&lt;a href=&quot;http://zoomquiet.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zoom.Quite&lt;/a&gt;的主页极富一个有趣的极客灵魂感。内容之多也是印象深刻。&lt;/p&gt;
&lt;p&gt;我之前做过几次尝试，但是效果都不是很理想，也没有找到特别好的办法，今天再次尝试，终于一鼓作气先完成了一个可用的及格版本，写一写，留个纪念。&lt;/p&gt;
&lt;h2 id=&quot;Github-Pages&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#Github-Pages&quot; class=&quot;headerlink&quot; title=&quot;Github Pages&quot;&gt;&lt;/a&gt;Github Pages&lt;/h2&gt;&lt;p&gt;Github Pages 是Github 的一个项目，通过在Github托管代码的方式把静态页面组装成可以展示的页面。&lt;a href=&quot;https://github.com/showcases/github-pages-examples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;有大量的示例。&lt;br /&gt;&lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;主页&lt;/a&gt;的视频一目了然，不再赘述。&lt;br /&gt;我的主页就是通过Github Pages生成的，使用的是默认的模版，如果不做过多的定制化，仅仅是在主页修改文字的话，内容非常非常的简单。参考我的&lt;a href=&quot;https://github.com/Wangjunyu/Leon.junyu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;仓库&lt;/a&gt;。对于这个主题，自己现在还是很满意的。&lt;/p&gt;
&lt;h2 id=&quot;域名设置&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#域名设置&quot; class=&quot;headerlink&quot; title=&quot;域名设置&quot;&gt;&lt;/a&gt;域名设置&lt;/h2&gt;&lt;p&gt;以往二级域名的设置已经驾轻就熟。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以blog.junyu.io的设置为例，在域名服务解析的服务页面修改模式为CNAME，把指向的地址修改为：wangjunyu.gitub.io. ，保存即可。如果还无法连接，回到Github查看设置，一般的做法是增加CNAME文件，修改默认分支为gh-pages。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一次设置的是一级域名以及开头为www 的跳转，按照之前的方式设置始终无法生效。之后从官方文档的&lt;a href=&quot;https://help.github.com/articles/using-a-custom-domain-with-github-pages/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using a custom domain with GitHub Pages
&lt;/a&gt;开始一页一页的找，终于在&lt;a href=&quot;https://help.github.com/articles/about-supported-custom-domains/#apex-domains&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;About supported custom domains
&lt;/a&gt;找到了端倪：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An apex domain is usually configured with an A, ALIAS, or ANAME record through your DNS provider.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于一级域名的设置，一般是在填写二级域名的地方写上&lt;code&gt;@&lt;/code&gt;，选择A 或者ALIAS 模式，跳转的地址需要使用ip，在上面提到的文档中有提到。修改之后，还可以用文档中提到的’dig’ 命令进行测试。貌似一级域名的调整需要一些时间，不过一般来说十几分钟也就够了。&lt;/p&gt;
&lt;p&gt;最后，展示一下我的&lt;a href=&quot;http://junyu.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;主页&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/setting-up-an-apex-domain/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Setting up an apex domain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/setting-up-an-apex-domain-and-www-subdomain/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Setting up an apex domain and www subdomain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/about-supported-custom-domains/#www-subdomains&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;About supported custom domains
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;a href=&quot;http://blog.junyu.pro&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;完&lt;/a&gt;&lt;/blockquote&gt;


&lt;h2 id=&quot;ChangeLog&quot;&gt;&lt;a href=&quot;http://blog.junyu.io/atom.xml#ChangeLog&quot; class=&quot;headerlink&quot; title=&quot;ChangeLog&quot;&gt;&lt;/a&gt;ChangeLog&lt;/h2&gt;&lt;p&gt;170820 新建&lt;/p&gt;</description>
	<pubDate>Sun, 20 Aug 2017 12:03:00 +0000</pubDate>
</item>
<item>
	<title>Debug Uself grp.: Aoi-crontab</title>
	<guid>http://du.zoomquiet.io/2017-08/aoi-crontab/</guid>
	<link>http://du.zoomquiet.io/2017-08/aoi-crontab/</link>
	<description>&lt;h1 id=&quot;crontab-是位好伙伴&quot;&gt;crontab 是位好伙伴&lt;/h1&gt;

&lt;p&gt;planet 很简单粗暴,只是:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如何免费的发布成网站?&lt;/li&gt;
  &lt;li&gt;又如何自动的刷新?&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;github-pages&quot;&gt;github-pages&lt;/h2&gt;
&lt;p&gt;~ &lt;a href=&quot;https://help.github.com/articles/user-organization-and-project-pages/&quot;&gt;User, Organization, and Project Pages - User Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;第一时间想到 &lt;code class=&quot;highlighter-rouge&quot;&gt;github-pages&lt;/code&gt; :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;只是记忆中要一个特殊的孤子分支什么的…&lt;/li&gt;
  &lt;li&gt;结果官方文档一看:
    &lt;ul&gt;
      &lt;li&gt;master, gh-pages, or a /docs folder on master&lt;/li&gt;
      &lt;li&gt;嗯哼?! 可以用约定的一个 master 目录就可以了?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://openmindclub.qiniucdn.com/res/debuguself/github_pages_docs.png&quot; alt=&quot;github_pages_docs.png（PNG 图像，494x548 像素）&quot; /&gt;&lt;/p&gt;

&lt;p&gt;果然…那就简单了&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;output_dir = docs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将相关配置文件中, 指定的输出目录变成 &lt;code class=&quot;highlighter-rouge&quot;&gt;docs&lt;/code&gt;,
每次 push 到 github 时,就完成了网站的更新.&lt;/p&gt;

&lt;h2 id=&quot;定期的嗯哼&quot;&gt;定期的嗯哼&lt;/h2&gt;
&lt;p&gt;~ 在所有 UNIX/Linux 环境中, 当前是 crontab&lt;/p&gt;

&lt;p&gt;参考:&lt;a href=&quot;https://help.ubuntu.com/community/CronHowto&quot;&gt;CronHowto - Community Help Wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;先在用户 crontab 中配置&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# m h  dom mon dow   command
*/10 *     * * *   /opt/cron/updates.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;每 10 秒调用一次 &lt;a href=&quot;https://github.com/zoom-quiet/scm/blob/master/sh/cron/updates.sh&quot;&gt;updates.sh&lt;/a&gt; 以便调试&lt;/p&gt;

&lt;p&gt;调试好后, 更新配置为&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# m h  dom mon dow   command
42 */8     * * *   /opt/cron/updates.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;每8小时的第42分钟,运行一次, 并将日志输出为:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;opt/log/cron on default
$ ls -1
170818-planet.log
170819-planet.log
170820-planet.log
170821-planet.log
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这种形式…&lt;/p&gt;

&lt;h2 id=&quot;整体图谱&quot;&gt;整体图谱&lt;/h2&gt;
&lt;p&gt;~ 所以, 最终通过一台家用服务器, 无值守的完成了一大类静态网站的更新和发布&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            du.zoomquiet.io/planet/
                                  ^ 
                                  |
                          [[github-pages]]
{rss} {rss} ... {rss}             ^
  \     |         /               |
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        internet                  ^
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        home wifi                 ^ 
            |                     |
            V                     |
        Ubuntu 16.4               | 
       /[ miniPC ]                |
      /     |                     |
  crontab   |                     |
    |       V                     +
    +---&amp;gt;(Planet) --&amp;gt; HTML -&amp;gt; git push
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;todo&quot;&gt;TODO&lt;/h1&gt;
&lt;p&gt;~ 当然的故事远没有可以结束, 等待继续折腾的有:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;固化 wifi 连接的 ip&lt;/li&gt;
  &lt;li&gt;在 pyenv 中也能安装使用 baddb&lt;/li&gt;
  &lt;li&gt;将更新成果 email 给自己,以便知晓&lt;/li&gt;
  &lt;li&gt;将失败的更新 通过短信/微信/Slcak 等等渠道提醒自己&lt;/li&gt;
  &lt;li&gt;通过 Slack 或是其它渠道, 可以发布指令给主机进行各种必要的行为&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;用时&quot;&gt;用时&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;.5h 研究 github-pages 文档&lt;/li&gt;
  &lt;li&gt;1.h 实验明确 docs 效果&lt;/li&gt;
  &lt;li&gt;1.h 调试 crontab 脚本&lt;/li&gt;
  &lt;li&gt;.5h 测试全部自动化行为&lt;/li&gt;
  &lt;li&gt;1.h ASCII 图谱和文档化&lt;/li&gt;
&lt;/ul&gt;</description>
	<pubDate>Fri, 18 Aug 2017 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Debug Uself grp.: Aoi-planetDUer</title>
	<guid>http://du.zoomquiet.io/2017-08/aoi-planet/</guid>
	<link>http://du.zoomquiet.io/2017-08/aoi-planet/</link>
	<description>&lt;h1 id=&quot;planet-是个好同志&quot;&gt;Planet 是个好同志&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://www.planetplanet.org/img/planet_text.png&quot; alt=&quot;planet_text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;13年前用过,那时, 代码就已经不更新了…
为什么? 实在是一下子就写到完美了!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;毕竟功能异常单纯, 就是将指定的 RSS 之类聚合数据, 按照日期整理为一页 HTML,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://planetpython.org/&quot;&gt;Planet Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://planet.haskell.org/&quot;&gt;Haskell&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://planet.lisp.org/&quot;&gt;Lisp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://planet.perl.org/&quot;&gt;Perl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.planetmysql.org/&quot;&gt;MySQL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://planet.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然的自怼圈也应该有!&lt;/p&gt;

&lt;h2 id=&quot;pyenv&quot;&gt;pyenv&lt;/h2&gt;
&lt;p&gt;~ 第一个要配置的还是 python 环境了&lt;/p&gt;

&lt;p&gt;当然的 ubuntu 内置了 python 环境,
但是, 必须第一时间将系统 py 运行时和自己的开发环境有效隔离哪…&lt;/p&gt;

&lt;p&gt;参考:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pyenv/pyenv#installation&quot;&gt;pyenv/pyenv: Simple Python version management&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/pyenv/pyenv/wiki&quot;&gt;Troubleshooting / FAQ · pyenv/pyenv Wiki&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pyenv/pyenv-virtualenv&quot;&gt;pyenv/pyenv-virtualenv: a pyenv plugin to manage virtualenv (a.k.a. python-virtualenv)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;进行快速配置就好…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt install git
$ cd /opt/repo
$ git clone https://github.com/pyenv/pyenv.git .pyenv
$ git clone https://github.com/pyenv/pyenv-virtualenv.git .pyenv/plugins/pyenv-virtualenv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;配置&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_profile&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;##############################################################################
#   --&amp;gt; PyEnv
##############################################################################
export PYENV_ROOT=&quot;/opt/repo/.pyenv&quot;
export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;

eval &quot;$(pyenv init -)&quot;
#   export PYENV_VIRTUALENV_DISABLE_PROMPT=0
eval &quot;$(pyenv virtualenv-init -)&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;激活加载:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;安装编译工作用 python 环境:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 先得安装一堆编译依赖工具/库
$ sudo apt install -y make build-essential libssl-dev zlib1g-dev \
    libbz2-dev libreadline-dev libsqlite3-dev \
    wget curl llvm libncurses5-dev xz-utils tk-dev

$ pyenv install --list
...
    可以感叹一下支持的发行版有多丰富

$ pyenv install 3.6.2
...
$ pyenv install 2.7.13
...
$ pyenv rehash

$ pyenv virtualenv 2.7.13 2713DAMA
...
You are using pip version 6.1.1, however version 9.0.1 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.
...
$ pyenv virtualenv 3.6.2 362CV3

$ pyenv rehash

$ pyenv versions
* system (set by /opt/repo/.pyenv/version)
  2.7.13
  2.7.13/envs/2713DAMA
  2713DAMA
  3.6.2
  3.6.2/envs/362CV3
  362CV3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;实际使用情景:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zoomq @ aoi in ~
$ cd /opt
zoomq @ aoi in /opt on default

$ pyenv 2712DAMA 

(2712DAMA)
zoomq @ aoi in /opt on default
$ cd app

(2712DAMA)
zoomq @ aoi in /opt/app on default
$ python
Python 2.7.12 (default, Nov 19 2016, 06:48:10)
[GCC 5.4.0 20160609] on linux2
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&amp;gt;&amp;gt;&amp;gt;

zoomq @ aoi in /opt/app on default
$ cd ../log

zoomq @ aoi in /opt/log on default
$ pyenv local 362CV3

(362CV3)
zoomq @ aoi in /opt/app on default
$ python
Python 3.6.2 (default, Aug 17 2017, 23:28:25)
[GCC 5.4.0 20160609] on linux
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;部署-planet&quot;&gt;部署 planet&lt;/h2&gt;
&lt;p&gt;~ 情况并没有想象的那么简单…&lt;/p&gt;

&lt;p&gt;毕竟是有快10年没有更新的工程了, 使用配置方式没有变,
快速根据模板完成了配置, 一运行:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python code/planet.py config/du.ini
Traceback (most recent call last):
  File &quot;code/planet.py&quot;, line 24, in &amp;lt;module&amp;gt;
    import planet
  File &quot;/opt/www/planet/code/planet/__init__.py&quot;, line 35, in &amp;lt;module&amp;gt;
    import dbhash
  File &quot;/opt/repo/.pyenv/versions/2.7.13/lib/python2.7/dbhash.py&quot;, line 7, in &amp;lt;module&amp;gt;
    import bsddb
  File &quot;/opt/repo/.pyenv/versions/2.7.13/lib/python2.7/bsddb/__init__.py&quot;, line 67, in &amp;lt;module&amp;gt;
    import _bsddb
ImportError: No module named _bsddb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;嗯哼, 这事儿听说过,因为版权的问题, 从2.5版本后, 将 bsddb 从内置模块中移除了,
所以…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/28253731/importerror-no-module-named-bsddb-when-opening-shelve-in-docker-container&quot;&gt;python - “ImportError: No module named _bsddb” when opening shelve in Docker container - Stack Overflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/16003224/installing-bsddb-package-python&quot;&gt;osx - Installing bsddb package - python - Stack Overflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://marc-abramowitz.com/archives/2007/11/28/hacking-os-xs-python-dbhash-and-bsddb-modules-to-work/&quot;&gt;Hacking OS X’s Python dbhash and bsddb modules to work | Marc Abramowitz&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pypi.python.org/pypi/bsddb3/6.2.4&quot;&gt;bsddb3 6.2.4 : Python Package Index&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然,有很多方式可以弥补, 最简单的:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pip install bsddb3
Collecting bsddb3
  Using cached bsddb3-6.2.4.tar.gz
    Complete output from command python setup.py egg_info:
    Can't find a local Berkeley DB installation.
    (suggestion: try the --berkeley-db=/path/to/bsddb option)

    ----------------------------------------
Command &quot;python setup.py egg_info&quot; failed with error code 1 in /tmp/pip-build-ST2bF0/bsddb3/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;/path/to/bsddb&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有独立的 bsddb 产品?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.linuxfromscratch.org/blfs/view/stable/server/db.html&quot;&gt;Berkeley DB-6.2.23&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jcea.es/programacion/pybsddb.htm&quot;&gt;Python “bindings” for Oracle Berkeley DB&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;好吧, 忒复杂了…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;于是选择相信 Ubuntu 的软件仓库:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ apt search bsddb
Sorting... Done
Full Text Search... Done
python-bsddb3/xenial,now 6.1.0-1build2 amd64 [installed]
  Python interface for Berkeley DB

python-bsddb3-dbg/xenial 6.1.0-1build2 amd64
  Python interface for Berkeley DB (debug extension)

python-bsddb3-doc/xenial,xenial 6.1.0-1build2 all
  Documentation for the python Berkeley DB interface module

python3-bsddb3/xenial 6.1.0-1build2 amd64
  Python interface for Berkeley DB (Python 3.x)

python3-bsddb3-dbg/xenial 6.1.0-1build2 amd64
  Python interface for Berkeley DB (debug extension, Python 3.x)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;那就简单了:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt install python-bsddb3
$ pip list
adium-theme-ubuntu (0.3.4)
bsddb3 (6.1.0)
mercurial (3.7.3)
pip (8.1.1)
setuptools (20.7.0)
unity-lens-photos (1.0)
wheel (0.29.0)

$ python
Python 2.7.12 (default, Nov 19 2016, 06:48:10)
[GCC 5.4.0 20160609] on linux2
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&amp;gt;&amp;gt;&amp;gt; import bsddb3
&amp;gt;&amp;gt;&amp;gt; dir(bsddb3)
['MutableMapping', '_DBWithCursor', '_DeadlockWrap', '__builtins__', '__doc__', '__file__', '__name__', '__package__', '__path__', '__version__', '_checkflag', '_db', '_iter_mixin', '_openDBEnv', '_pybsddb', 'absolute_import', 'btopen', 'collections', 'db', 'dbutils', 'error', 'hashopen', 'os', 'ref', 'rnopen', 'sys']
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;in-pyenv-&quot;&gt;in pyenv ?&lt;/h3&gt;
&lt;p&gt;只是比较尴尬的, 这样一来, 只能使用系统 python 2.7.12&lt;/p&gt;

&lt;p&gt;之前通过 pyenv 安装的 2.7.14/3.6.2 什么的都无法正常驱动 planet 了…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python code/planet.py config/du.ini
DEBUG:planet.runner:Socket timeout set to 20 seconds
INFO:planet.runner:Loading cached data
INFO:planet:Updating feed &amp;lt;http://du.zoomquiet.io/atom.xml&amp;gt;
DEBUG:planet:Last Modified: 2017-08-21T10:00:52+00:00
DEBUG:planet:Items in Feed: 12
...
INFO:planet.runner:Processing template config/index.html.tmpl
INFO:planet.runner:Writing docs/index.html
INFO:planet.runner:Processing template config/atom.xml.tmpl
INFO:planet.runner:Writing docs/atom.xml
INFO:planet.runner:Processing template config/rss20.xml.tmpl
INFO:planet.runner:Writing docs/rss20.xml
INFO:planet.runner:Processing template config/rss10.xml.tmpl
INFO:planet.runner:Writing docs/rss10.xml
INFO:planet.runner:Processing template config/opml.xml.tmpl
INFO:planet.runner:Writing docs/opml.xml
INFO:planet.runner:Processing template config/foafroll.xml.tmpl
INFO:planet.runner:Writing docs/foafroll.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;不过, 没关系先用起来再说 &lt;code class=&quot;highlighter-rouge&quot;&gt;(￣▽￣)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;好在也额外的学到从 shell 脚本中调用 pyenv 环境的技巧:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pyenv/pyenv/issues/492&quot;&gt;Is there a preferred way to use pyenv in a shell script? · Issue #492 · pyenv/pyenv&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;pyenv 原作者的分享:
    &lt;ul&gt;
      &lt;li&gt;Both PYENV_VERSION and pyenv shell should work even in shell scripts. Latter requires you to add eval “$(pyenv init -)” in your script, though.&lt;/li&gt;
      &lt;li&gt;Personally I like to use PYENV_VERSION since it doesn’t require additional shell setup….&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e.g:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Set version to 2.7.10&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PYENV_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2.7.10

&lt;span class=&quot;c&quot;&gt;# DO STUFF&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# python --version # ==&amp;gt; Python 2.7.10&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Reset version&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;unset &lt;/span&gt;PYENV_VERSION
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;直接使用环境变量来切换就对了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;用时&quot;&gt;用时&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;.5h install pyenv&lt;/li&gt;
  &lt;li&gt;1.5h 各种 py 环境安装/镜像&lt;/li&gt;
  &lt;li&gt;1.h &lt;em&gt;bsddb&lt;/em&gt; 问题研究&lt;/li&gt;
  &lt;li&gt;.5h 完成 planet 工作驱动&lt;/li&gt;
&lt;/ul&gt;</description>
	<pubDate>Thu, 17 Aug 2017 00:00:00 +0000</pubDate>
</item>

</channel>
</rss>
